From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Davis Goodin <dagood@microsoft.com>
Date: Mon, 28 Aug 2023 16:39:33 -0500
Subject: [PATCH] Add backends with sha3_356

---
 backend/boring_linux.go  |  84 +++++++++++++++++++++++++++
 backend/cng_windows.go   |  99 ++++++++++++++++++++++++++++++++
 backend/nobackend.go     | 120 +++++++++++++++++++++++++++++++++++++++
 backend/openssl_linux.go |  96 +++++++++++++++++++++++++++++++
 hkdf/hkdf.go             |   2 +
 sha3/hashes.go           |   9 +++
 6 files changed, 410 insertions(+)
 create mode 100644 backend/boring_linux.go
 create mode 100644 backend/cng_windows.go
 create mode 100644 backend/nobackend.go
 create mode 100644 backend/openssl_linux.go

diff --git a/backend/boring_linux.go b/backend/boring_linux.go
new file mode 100644
index 00000000000000..e3a314a3309016
--- /dev/null
+++ b/backend/boring_linux.go
@@ -0,0 +1,84 @@
+// Code generated by xcrypto_backend_map. DO NOT EDIT.
+
+// Some backend functionality was skipped during mapping generation:
+//
+// Skipped "GenerateKeyECDSA": boring.BigInt uses unimported package
+// Skipped "NewPrivateKeyECDSA": boring.BigInt uses unimported package
+// Skipped "NewPublicKeyECDSA": boring.BigInt uses unimported package
+// Skipped "SignMarshalECDSA": boring.PrivateKeyECDSA uses unimported package
+// Skipped "VerifyECDSA": boring.PublicKeyECDSA uses unimported package
+// Skipped "DecryptRSAOAEP": boring.PrivateKeyRSA uses unimported package
+// Skipped "DecryptRSAPKCS1": boring.PrivateKeyRSA uses unimported package
+// Skipped "DecryptRSANoPadding": boring.PrivateKeyRSA uses unimported package
+// Skipped "EncryptRSAOAEP": boring.PublicKeyRSA uses unimported package
+// Skipped "EncryptRSAPKCS1": boring.PublicKeyRSA uses unimported package
+// Skipped "EncryptRSANoPadding": boring.PublicKeyRSA uses unimported package
+// Skipped "GenerateKeyRSA": boring.BigInt uses unimported package
+// Skipped "NewPrivateKeyRSA": boring.BigInt uses unimported package
+// Skipped "NewPublicKeyRSA": boring.BigInt uses unimported package
+// Skipped "SignRSAPKCS1v15": boring.PrivateKeyRSA uses unimported package
+// Skipped "SignRSAPSS": boring.PrivateKeyRSA uses unimported package
+// Skipped "VerifyRSAPKCS1v15": boring.PublicKeyRSA uses unimported package
+// Skipped "VerifyRSAPSS": boring.PublicKeyRSA uses unimported package
+// Skipped "ECDH": boring.PrivateKeyECDH uses unimported package
+// Skipped "GenerateKeyECDH": boring.PrivateKeyECDH uses unimported package
+// Skipped "NewPrivateKeyECDH": boring.PrivateKeyECDH uses unimported package
+// Skipped "NewPublicKeyECDH": boring.PublicKeyECDH uses unimported package
+
+//go:build goexperiment.boringcrypto && linux && cgo && (amd64 || arm64) && !android && !msan
+
+// Package boring provides access to BoringCrypto implementation functions.
+// Check the variable Enabled to find out whether BoringCrypto is available.
+// If BoringCrypto is not available, the functions in this package all panic.
+package backend
+
+import (
+	"crypto"
+	"crypto/cipher"
+	"hash"
+	_ "unsafe"
+)
+
+const Enabled = true
+
+//go:linkname RandReader crypto/internal/backend.RandReader
+var RandReader io.Reader
+
+//go:linkname NewSHA1 crypto/internal/backend.NewSHA1
+func NewSHA1() hash.Hash
+
+//go:linkname NewSHA224 crypto/internal/backend.NewSHA224
+func NewSHA224() hash.Hash
+
+//go:linkname NewSHA256 crypto/internal/backend.NewSHA256
+func NewSHA256() hash.Hash
+
+//go:linkname NewSHA384 crypto/internal/backend.NewSHA384
+func NewSHA384() hash.Hash
+
+//go:linkname NewSHA512 crypto/internal/backend.NewSHA512
+func NewSHA512() hash.Hash
+
+//go:linkname SHA1 crypto/internal/backend.SHA1
+func SHA1(p []byte) (sum [20]byte)
+
+//go:linkname SHA224 crypto/internal/backend.SHA224
+func SHA224(p []byte) (sum [28]byte)
+
+//go:linkname SHA256 crypto/internal/backend.SHA256
+func SHA256(p []byte) (sum [32]byte)
+
+//go:linkname SHA384 crypto/internal/backend.SHA384
+func SHA384(p []byte) (sum [48]byte)
+
+//go:linkname SHA512 crypto/internal/backend.SHA512
+func SHA512(p []byte) (sum [64]byte)
+
+//go:linkname NewHMAC crypto/internal/backend.NewHMAC
+func NewHMAC(h func() hash.Hash, key []byte) hash.Hash
+
+//go:linkname NewAESCipher crypto/internal/backend.NewAESCipher
+func NewAESCipher(key []byte) (cipher.Block, error)
+
+//go:linkname NewGCMTLS crypto/internal/backend.NewGCMTLS
+func NewGCMTLS(c cipher.Block) (cipher.AEAD, error)
diff --git a/backend/cng_windows.go b/backend/cng_windows.go
new file mode 100644
index 00000000000000..90e3ba466055f2
--- /dev/null
+++ b/backend/cng_windows.go
@@ -0,0 +1,99 @@
+// Code generated by xcrypto_backend_map. DO NOT EDIT.
+
+// Some backend functionality was skipped during mapping generation:
+//
+// Skipped "GenerateKeyECDSA": cng.BigInt uses unimported package
+// Skipped "NewPrivateKeyECDSA": cng.BigInt uses unimported package
+// Skipped "NewPublicKeyECDSA": cng.BigInt uses unimported package
+// Skipped "SignMarshalECDSA": cng.PrivateKeyECDSA uses unimported package
+// Skipped "VerifyECDSA": cng.PublicKeyECDSA uses unimported package
+// Skipped "SignECDSA": cng.PrivateKeyECDSA uses unimported package
+// Skipped "VerifyECDSARaw": cng.PublicKeyECDSA uses unimported package
+// Skipped "DecryptRSAOAEP": cng.PrivateKeyRSA uses unimported package
+// Skipped "DecryptRSAPKCS1": cng.PrivateKeyRSA uses unimported package
+// Skipped "DecryptRSANoPadding": cng.PrivateKeyRSA uses unimported package
+// Skipped "EncryptRSAOAEP": cng.PublicKeyRSA uses unimported package
+// Skipped "EncryptRSAPKCS1": cng.PublicKeyRSA uses unimported package
+// Skipped "EncryptRSANoPadding": cng.PublicKeyRSA uses unimported package
+// Skipped "GenerateKeyRSA": cng.BigInt uses unimported package
+// Skipped "NewPrivateKeyRSA": cng.BigInt uses unimported package
+// Skipped "NewPublicKeyRSA": cng.BigInt uses unimported package
+// Skipped "SignRSAPKCS1v15": cng.PrivateKeyRSA uses unimported package
+// Skipped "SignRSAPSS": cng.PrivateKeyRSA uses unimported package
+// Skipped "VerifyRSAPKCS1v15": cng.PublicKeyRSA uses unimported package
+// Skipped "VerifyRSAPSS": cng.PublicKeyRSA uses unimported package
+// Skipped "ECDH": cng.PrivateKeyECDH uses unimported package
+// Skipped "GenerateKeyECDH": cng.PrivateKeyECDH uses unimported package
+// Skipped "NewPrivateKeyECDH": cng.PrivateKeyECDH uses unimported package
+// Skipped "NewPublicKeyECDH": cng.PublicKeyECDH uses unimported package
+
+//go:build goexperiment.cngcrypto && windows
+
+// Package cng provides access to CNGCrypto implementation functions.
+// Check the variable Enabled to find out whether CNGCrypto is available.
+// If CNGCrypto is not available, the functions in this package all panic.
+package backend
+
+import (
+	"crypto/cipher"
+	"hash"
+	"io"
+
+	_ "unsafe"
+)
+
+const Enabled = true
+
+//go:linkname RandReader crypto/internal/backend.RandReader
+var RandReader io.Reader
+
+//go:linkname NewSHA1 crypto/internal/backend.NewSHA1
+func NewSHA1() hash.Hash
+
+//go:linkname NewSHA224 crypto/internal/backend.NewSHA224
+func NewSHA224() hash.Hash
+
+//go:linkname NewSHA256 crypto/internal/backend.NewSHA256
+func NewSHA256() hash.Hash
+
+//go:linkname NewSHA384 crypto/internal/backend.NewSHA384
+func NewSHA384() hash.Hash
+
+//go:linkname NewSHA512 crypto/internal/backend.NewSHA512
+func NewSHA512() hash.Hash
+
+//go:linkname NewSHA3_256 crypto/internal/backend.NewSHA3_256
+func NewSHA3_256() hash.Hash
+
+//go:noescape
+//go:linkname SHA1 crypto/internal/backend.SHA1
+func SHA1(p []byte) (sum [20]byte)
+
+//go:noescape
+//go:linkname SHA224 crypto/internal/backend.SHA224
+func SHA224(p []byte) (sum [28]byte)
+
+//go:noescape
+//go:linkname SHA256 crypto/internal/backend.SHA256
+func SHA256(p []byte) (sum [32]byte)
+
+//go:noescape
+//go:linkname SHA384 crypto/internal/backend.SHA384
+func SHA384(p []byte) (sum [48]byte)
+
+//go:noescape
+//go:linkname SHA512 crypto/internal/backend.SHA512
+func SHA512(p []byte) (sum [64]byte)
+
+//go:noescape
+//go:linkname SHA3_256 crypto/internal/backend.SHA3_256
+func SHA3_256(p []byte) (sum [32]byte)
+
+//go:linkname NewHMAC crypto/internal/backend.NewHMAC
+func NewHMAC(h func() hash.Hash, key []byte) hash.Hash
+
+//go:linkname NewAESCipher crypto/internal/backend.NewAESCipher
+func NewAESCipher(key []byte) (cipher.Block, error)
+
+//go:linkname NewGCMTLS crypto/internal/backend.NewGCMTLS
+func NewGCMTLS(c cipher.Block) (cipher.AEAD, error)
diff --git a/backend/nobackend.go b/backend/nobackend.go
new file mode 100644
index 00000000000000..6e9c029a2063e6
--- /dev/null
+++ b/backend/nobackend.go
@@ -0,0 +1,120 @@
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Do not edit the build constraint by hand. It is generated by "backendgen.go".
+
+//go:build !(goexperiment.boringcrypto && linux && cgo && (amd64 || arm64) && !android && !msan) && !(goexperiment.cngcrypto && windows) && !(goexperiment.opensslcrypto && linux && cgo)
+
+package backend
+
+import (
+	"crypto"
+	"crypto/cipher"
+	"hash"
+)
+
+const Enabled = false
+
+type BigInt = []uint
+
+type randReader int
+
+func (randReader) Read(b []byte) (int, error) { panic("cryptobackend: not available") }
+
+const RandReader = randReader(0)
+
+func NewSHA1() hash.Hash   { panic("cryptobackend: not available") }
+func NewSHA224() hash.Hash { panic("cryptobackend: not available") }
+func NewSHA256() hash.Hash { panic("cryptobackend: not available") }
+func NewSHA384() hash.Hash { panic("cryptobackend: not available") }
+func NewSHA512() hash.Hash { panic("cryptobackend: not available") }
+
+func NewSHA3_256() hash.Hash { panic("cryptobackend: not available") }
+
+func SHA1(p []byte) (sum [20]byte)   { panic("cryptobackend: not available") }
+func SHA224(p []byte) (sum [28]byte) { panic("cryptobackend: not available") }
+func SHA256(p []byte) (sum [32]byte) { panic("cryptobackend: not available") }
+func SHA384(p []byte) (sum [48]byte) { panic("cryptobackend: not available") }
+func SHA512(p []byte) (sum [64]byte) { panic("cryptobackend: not available") }
+
+func SHA3_256(p []byte) (sum [32]byte) { panic("cryptobackend: not available") }
+
+func NewHMAC(h func() hash.Hash, key []byte) hash.Hash { panic("cryptobackend: not available") }
+
+func NewAESCipher(key []byte) (cipher.Block, error) { panic("cryptobackend: not available") }
+func NewGCMTLS(c cipher.Block) (cipher.AEAD, error) { panic("cryptobackend: not available") }
+
+type PublicKeyECDSA struct{ _ int }
+type PrivateKeyECDSA struct{ _ int }
+
+func GenerateKeyECDSA(curve string) (X, Y, D BigInt, err error) {
+	panic("cryptobackend: not available")
+}
+func NewPrivateKeyECDSA(curve string, X, Y, D BigInt) (*PrivateKeyECDSA, error) {
+	panic("cryptobackend: not available")
+}
+func NewPublicKeyECDSA(curve string, X, Y BigInt) (*PublicKeyECDSA, error) {
+	panic("cryptobackend: not available")
+}
+func SignMarshalECDSA(priv *PrivateKeyECDSA, hash []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func VerifyECDSA(pub *PublicKeyECDSA, hash []byte, sig []byte) bool {
+	panic("cryptobackend: not available")
+}
+
+type PublicKeyRSA struct{ _ int }
+type PrivateKeyRSA struct{ _ int }
+
+func DecryptRSAOAEP(h, mgfHash hash.Hash, priv *PrivateKeyRSA, ciphertext, label []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func DecryptRSAPKCS1(priv *PrivateKeyRSA, ciphertext []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func DecryptRSANoPadding(priv *PrivateKeyRSA, ciphertext []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func EncryptRSAOAEP(h, mgfHash hash.Hash, pub *PublicKeyRSA, msg, label []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func EncryptRSAPKCS1(pub *PublicKeyRSA, msg []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func EncryptRSANoPadding(pub *PublicKeyRSA, msg []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func GenerateKeyRSA(bits int) (N, E, D, P, Q, Dp, Dq, Qinv BigInt, err error) {
+	panic("cryptobackend: not available")
+}
+func NewPrivateKeyRSA(N, E, D, P, Q, Dp, Dq, Qinv BigInt) (*PrivateKeyRSA, error) {
+	panic("cryptobackend: not available")
+}
+func NewPublicKeyRSA(N, E BigInt) (*PublicKeyRSA, error) {
+	panic("cryptobackend: not available")
+}
+func SignRSAPKCS1v15(priv *PrivateKeyRSA, h crypto.Hash, hashed []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func SignRSAPSS(priv *PrivateKeyRSA, h crypto.Hash, hashed []byte, saltLen int) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+func VerifyRSAPKCS1v15(pub *PublicKeyRSA, h crypto.Hash, hashed, sig []byte) error {
+	panic("cryptobackend: not available")
+}
+func VerifyRSAPSS(pub *PublicKeyRSA, h crypto.Hash, hashed, sig []byte, saltLen int) error {
+	panic("cryptobackend: not available")
+}
+
+type PublicKeyECDH struct{}
+type PrivateKeyECDH struct{}
+
+func ECDH(*PrivateKeyECDH, *PublicKeyECDH) ([]byte, error)    { panic("cryptobackend: not available") }
+func GenerateKeyECDH(string) (*PrivateKeyECDH, []byte, error) { panic("cryptobackend: not available") }
+func NewPrivateKeyECDH(string, []byte) (*PrivateKeyECDH, error) {
+	panic("cryptobackend: not available")
+}
+func NewPublicKeyECDH(string, []byte) (*PublicKeyECDH, error) { panic("cryptobackend: not available") }
+func (*PublicKeyECDH) Bytes() []byte                          { panic("cryptobackend: not available") }
+func (*PrivateKeyECDH) PublicKey() (*PublicKeyECDH, error)    { panic("cryptobackend: not available") }
diff --git a/backend/openssl_linux.go b/backend/openssl_linux.go
new file mode 100644
index 00000000000000..a29d04feb5e76a
--- /dev/null
+++ b/backend/openssl_linux.go
@@ -0,0 +1,96 @@
+// Code generated by xcrypto_backend_map. DO NOT EDIT.
+
+// Some backend functionality was skipped during mapping generation:
+//
+// Skipped "GenerateKeyECDSA": openssl.BigInt uses unimported package
+// Skipped "NewPrivateKeyECDSA": openssl.BigInt uses unimported package
+// Skipped "NewPublicKeyECDSA": openssl.BigInt uses unimported package
+// Skipped "SignMarshalECDSA": openssl.PrivateKeyECDSA uses unimported package
+// Skipped "VerifyECDSA": openssl.PublicKeyECDSA uses unimported package
+// Skipped "DecryptRSAOAEP": openssl.PrivateKeyRSA uses unimported package
+// Skipped "DecryptRSAPKCS1": openssl.PrivateKeyRSA uses unimported package
+// Skipped "DecryptRSANoPadding": openssl.PrivateKeyRSA uses unimported package
+// Skipped "EncryptRSAOAEP": openssl.PublicKeyRSA uses unimported package
+// Skipped "EncryptRSAPKCS1": openssl.PublicKeyRSA uses unimported package
+// Skipped "EncryptRSANoPadding": openssl.PublicKeyRSA uses unimported package
+// Skipped "GenerateKeyRSA": openssl.BigInt uses unimported package
+// Skipped "NewPrivateKeyRSA": openssl.BigInt uses unimported package
+// Skipped "NewPublicKeyRSA": openssl.BigInt uses unimported package
+// Skipped "SignRSAPKCS1v15": openssl.PrivateKeyRSA uses unimported package
+// Skipped "SignRSAPSS": openssl.PrivateKeyRSA uses unimported package
+// Skipped "VerifyRSAPKCS1v15": openssl.PublicKeyRSA uses unimported package
+// Skipped "VerifyRSAPSS": openssl.PublicKeyRSA uses unimported package
+// Skipped "ECDH": openssl.PrivateKeyECDH uses unimported package
+// Skipped "GenerateKeyECDH": openssl.PrivateKeyECDH uses unimported package
+// Skipped "NewPrivateKeyECDH": openssl.PrivateKeyECDH uses unimported package
+// Skipped "NewPublicKeyECDH": openssl.PublicKeyECDH uses unimported package
+
+//go:build goexperiment.opensslcrypto && linux && cgo
+
+// Package openssl provides access to OpenSSLCrypto implementation functions.
+// Check the variable Enabled to find out whether OpenSSLCrypto is available.
+// If OpenSSLCrypto is not available, the functions in this package all panic.
+package backend
+
+import (
+	"crypto/cipher"
+	"hash"
+	"io"
+	_ "unsafe"
+)
+
+const Enabled = true
+
+//go:linkname RandReader crypto/internal/backend.RandReader
+var RandReader io.Reader
+
+//go:linkname NewSHA1 crypto/internal/backend.NewSHA1
+func NewSHA1() hash.Hash
+
+//go:linkname NewSHA224 crypto/internal/backend.NewSHA224
+func NewSHA224() hash.Hash
+
+//go:linkname NewSHA256 crypto/internal/backend.NewSHA256
+func NewSHA256() hash.Hash
+
+//go:linkname NewSHA384 crypto/internal/backend.NewSHA384
+func NewSHA384() hash.Hash
+
+//go:linkname NewSHA512 crypto/internal/backend.NewSHA512
+func NewSHA512() hash.Hash
+
+//go:linkname NewSHA3_256 crypto/internal/backend.NewSHA3_256
+func NewSHA3_256() hash.Hash
+
+//go:noescape
+//go:linkname SHA1 crypto/internal/backend.SHA1
+func SHA1(p []byte) (sum [20]byte)
+
+//go:noescape
+//go:linkname SHA224 crypto/internal/backend.SHA224
+func SHA224(p []byte) (sum [28]byte)
+
+//go:noescape
+//go:linkname SHA256 crypto/internal/backend.SHA256
+func SHA256(p []byte) (sum [32]byte)
+
+//go:noescape
+//go:linkname SHA384 crypto/internal/backend.SHA384
+func SHA384(p []byte) (sum [48]byte)
+
+//go:noescape
+//go:linkname SHA512 crypto/internal/backend.SHA512
+func SHA512(p []byte) (sum [64]byte)
+
+//go:noescape
+//go:linkname SHA3_256 crypto/internal/backend.SHA3_256
+func SHA3_256(p []byte) (sum [32]byte)
+
+//go:linkname NewHMAC crypto/internal/backend.NewHMAC
+func NewHMAC(h func() hash.Hash, key []byte) hash.Hash
+
+//go:linkname NewAESCipher crypto/internal/backend.NewAESCipher
+func NewAESCipher(key []byte) (cipher.Block, error)
+
+//go:linkname NewGCMTLS crypto/internal/backend.NewGCMTLS
+func NewGCMTLS(c cipher.Block) (cipher.AEAD, error)
diff --git a/hkdf/hkdf.go b/hkdf/hkdf.go
index dda3f143bec506..8700f761b3b6de 100644
--- a/hkdf/hkdf.go
+++ b/hkdf/hkdf.go
@@ -13,6 +13,7 @@ package hkdf // import "golang.org/x/crypto/hkdf"
 import (
 	"crypto/hmac"
 	"errors"
+	"fmt"
 	"hash"
 	"io"
 )
@@ -88,6 +89,7 @@ func Expand(hash func() hash.Hash, pseudorandomKey, info []byte) io.Reader {
 // New returns a Reader, from which keys can be read, using the given hash,
 // secret, salt and context info. Salt and info can be nil.
 func New(hash func() hash.Hash, secret, salt, info []byte) io.Reader {
+	fmt.Println("This is a not-so-subtle modification to x/crypto that you got automatically!")
 	prk := Extract(hash, secret, salt)
 	return Expand(hash, prk, info)
 }
diff --git a/sha3/hashes.go b/sha3/hashes.go
index 0d8043fd2a173d..655853d8ae78c6 100644
--- a/sha3/hashes.go
+++ b/sha3/hashes.go
@@ -10,6 +10,8 @@ package sha3
 
 import (
 	"hash"
+
+	"golang.org/x/crypto/backend"
 )
 
 // New224 creates a new SHA3-224 hash.
@@ -26,6 +28,10 @@ func New224() hash.Hash {
 // Its generic security strength is 256 bits against preimage attacks,
 // and 128 bits against collision attacks.
 func New256() hash.Hash {
+	if backend.Enabled {
+		println("using backend sha3_256")
+		return backend.NewSHA3_256()
+	}
 	if h := new256Asm(); h != nil {
 		return h
 	}
@@ -74,6 +80,9 @@ func Sum224(data []byte) (digest [28]byte) {
 
 // Sum256 returns the SHA3-256 digest of the data.
 func Sum256(data []byte) (digest [32]byte) {
+	if backend.Enabled {
+		return backend.SHA3_256(data)
+	}
 	h := New256()
 	h.Write(data)
 	h.Sum(digest[:0])
