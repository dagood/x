From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Davis Goodin <dagood@microsoft.com>
Date: Tue, 15 Aug 2023 13:36:48 -0500
Subject: [PATCH] Mass rename golang.org/x/crypto -> github.com/dagood/x/crypto

---
 README.md                                      |  6 +++---
 acme/autocert/autocert.go                      |  2 +-
 acme/autocert/autocert_test.go                 |  4 ++--
 acme/autocert/example_test.go                  |  2 +-
 acme/autocert/internal/acmetest/ca.go          |  2 +-
 acme/autocert/renewal_test.go                  |  4 ++--
 acme/http.go                                   |  2 +-
 acme/http_test.go                              |  2 +-
 acme/internal/acmeprobe/prober.go              |  2 +-
 acme/version_go112.go                          |  2 +-
 argon2/argon2.go                               |  2 +-
 argon2/blake2b.go                              |  2 +-
 bcrypt/bcrypt.go                               |  4 ++--
 blake2s/blake2s.go                             |  2 +-
 blowfish/cipher.go                             |  4 ++--
 bn256/bn256.go                                 |  2 +-
 cast5/cast5.go                                 |  4 ++--
 chacha20/chacha_generic.go                     |  4 ++--
 chacha20poly1305/chacha20poly1305.go           |  2 +-
 chacha20poly1305/chacha20poly1305_amd64.go     |  2 +-
 chacha20poly1305/chacha20poly1305_generic.go   |  6 +++---
 chacha20poly1305/xchacha20poly1305.go          |  2 +-
 cryptobyte/asn1.go                             |  2 +-
 cryptobyte/asn1/asn1.go                        |  2 +-
 cryptobyte/asn1_test.go                        |  2 +-
 cryptobyte/example_test.go                     |  4 ++--
 cryptobyte/string.go                           |  2 +-
 curve25519/curve25519.go                       |  2 +-
 curve25519/curve25519_compat.go                |  2 +-
 curve25519/curve25519_test.go                  |  2 +-
 curve25519/internal/field/_asm/fe_amd64_asm.go |  6 +++---
 curve25519/internal/field/_asm/go.mod          |  4 ++--
 curve25519/internal/field/_asm/go.sum          |  4 ++--
 ed25519/ed25519_test.go                        |  2 +-
 go.mod                                         |  2 +-
 hkdf/example_test.go                           |  2 +-
 hkdf/hkdf.go                                   |  2 +-
 internal/backend/backend_disabled.go           |  5 +++++
 internal/backend/backend_enabled.go            |  5 +++++
 internal/wycheproof/aead_test.go               |  2 +-
 internal/wycheproof/dsa_test.go                |  2 +-
 internal/wycheproof/ecdh_test.go               |  4 ++--
 internal/wycheproof/ecdsa_test.go              |  4 ++--
 internal/wycheproof/eddsa_test.go              |  2 +-
 internal/wycheproof/hkdf_test.go               |  2 +-
 internal/wycheproof/internal/dsa/dsa.go        |  4 ++--
 md4/example_test.go                            |  2 +-
 md4/md4.go                                     |  2 +-
 nacl/auth/example_test.go                      |  2 +-
 nacl/box/box.go                                | 10 +++++-----
 nacl/box/box_test.go                           |  2 +-
 nacl/box/example_test.go                       |  2 +-
 nacl/secretbox/example_test.go                 |  2 +-
 nacl/secretbox/secretbox.go                    |  8 ++++----
 nacl/sign/sign.go                              |  4 ++--
 ocsp/ocsp.go                                   |  2 +-
 openpgp/armor/armor.go                         |  5 +++--
 openpgp/clearsign/clearsign.go                 |  8 ++++----
 openpgp/clearsign/clearsign_test.go            |  4 ++--
 openpgp/elgamal/elgamal.go                     |  4 ++--
 openpgp/errors/errors.go                       |  2 +-
 openpgp/keys.go                                |  6 +++---
 openpgp/keys_test.go                           |  4 ++--
 openpgp/packet/compressed.go                   |  3 ++-
 openpgp/packet/encrypted_key.go                |  4 ++--
 openpgp/packet/one_pass_signature.go           |  5 +++--
 openpgp/packet/opaque.go                       |  2 +-
 openpgp/packet/packet.go                       |  6 +++---
 openpgp/packet/packet_test.go                  |  3 ++-
 openpgp/packet/private_key.go                  |  6 +++---
 openpgp/packet/public_key.go                   |  4 ++--
 openpgp/packet/public_key_v3.go                |  2 +-
 openpgp/packet/reader.go                       |  3 ++-
 openpgp/packet/signature.go                    |  4 ++--
 openpgp/packet/signature_v3.go                 |  4 ++--
 openpgp/packet/signature_v3_test.go            |  2 +-
 openpgp/packet/symmetric_key_encrypted.go      |  4 ++--
 openpgp/packet/symmetrically_encrypted.go      |  3 ++-
 openpgp/packet/symmetrically_encrypted_test.go |  3 ++-
 openpgp/read.go                                |  8 ++++----
 openpgp/read_test.go                           |  4 ++--
 openpgp/s2k/s2k.go                             |  4 ++--
 openpgp/s2k/s2k_test.go                        |  2 +-
 openpgp/write.go                               |  8 ++++----
 openpgp/write_test.go                          |  2 +-
 otr/otr.go                                     |  2 +-
 pbkdf2/pbkdf2.go                               |  2 +-
 pkcs12/crypto.go                               |  2 +-
 poly1305/poly1305_compat.go                    |  8 ++++----
 ripemd160/ripemd160.go                         |  2 +-
 salsa20/salsa/hsalsa20.go                      |  2 +-
 salsa20/salsa20.go                             |  6 +++---
 scrypt/example_test.go                         |  2 +-
 scrypt/scrypt.go                               |  4 ++--
 sha3/doc.go                                    |  2 +-
 ssh/agent/client.go                            |  6 +++---
 ssh/agent/client_test.go                       |  2 +-
 ssh/agent/example_test.go                      |  4 ++--
 ssh/agent/forward.go                           |  2 +-
 ssh/agent/keyring.go                           |  2 +-
 ssh/agent/server.go                            |  4 ++--
 ssh/agent/server_test.go                       |  2 +-
 ssh/agent/testdata_test.go                     |  4 ++--
 ssh/cipher.go                                  |  4 ++--
 ssh/cipher_test.go                             |  4 ++--
 ssh/doc.go                                     |  2 +-
 ssh/example_test.go                            |  4 ++--
 ssh/internal/bcrypt_pbkdf/bcrypt_pbkdf.go      |  3 ++-
 ssh/kex.go                                     |  2 +-
 ssh/keys.go                                    |  4 ++--
 ssh/keys_test.go                               |  4 ++--
 ssh/knownhosts/knownhosts.go                   |  2 +-
 ssh/knownhosts/knownhosts_test.go              |  2 +-
 ssh/session_test.go                            |  2 +-
 ssh/test/agent_unix_test.go                    |  4 ++--
 ssh/test/cert_test.go                          |  2 +-
 ssh/test/doc.go                                |  4 ++--
 ssh/test/multi_auth_test.go                    |  2 +-
 ssh/test/session_test.go                       |  2 +-
 ssh/test/test_unix_test.go                     |  6 +++---
 ssh/test/testdata_test.go                      |  4 ++--
 ssh/testdata/doc.go                            |  4 ++--
 ssh/testdata_test.go                           |  2 +-
 tea/cipher.go                                  |  2 +-
 twofish/twofish.go                             |  4 ++--
 x509roots/fallback/fallback.go                 |  2 +-
 x509roots/fallback/go.mod                      |  2 +-
 x509roots/gen_fallback_bundle.go               |  2 +-
 x509roots/nss/parser.go                        |  2 +-
 xtea/cipher.go                                 |  4 ++--
 xts/xts.go                                     |  4 ++--
 131 files changed, 225 insertions(+), 207 deletions(-)
 create mode 100644 internal/backend/backend_disabled.go
 create mode 100644 internal/backend/backend_enabled.go

diff --git a/README.md b/README.md
index 92f73cdfbfeeb8..b6e24a3a8ad0d8 100644
--- a/README.md
+++ b/README.md
@@ -1,13 +1,13 @@
 # Go Cryptography
 
-[![Go Reference](https://pkg.go.dev/badge/golang.org/x/crypto.svg)](https://pkg.go.dev/golang.org/x/crypto)
+[![Go Reference](https://pkg.go.dev/badge/github.com/dagood/x/crypto.svg)](https://pkg.go.dev/github.com/dagood/x/crypto)
 
 This repository holds supplementary Go cryptography libraries.
 
 ## Download/Install
 
-The easiest way to install is to run `go get -u golang.org/x/crypto/...`. You
-can also manually git clone the repository to `$GOPATH/src/golang.org/x/crypto`.
+The easiest way to install is to run `go get -u github.com/dagood/x/crypto/...`. You
+can also manually git clone the repository to `$GOPATH/src/github.com/dagood/x/crypto`.
 
 ## Report Issues / Send Patches
 
diff --git a/acme/autocert/autocert.go b/acme/autocert/autocert.go
index 6b4cdf406d3b6e..0dd55b02692058 100644
--- a/acme/autocert/autocert.go
+++ b/acme/autocert/autocert.go
@@ -31,7 +31,7 @@ import (
 	"sync"
 	"time"
 
-	"golang.org/x/crypto/acme"
+	"github.com/dagood/x/crypto/acme"
 	"golang.org/x/net/idna"
 )
 
diff --git a/acme/autocert/autocert_test.go b/acme/autocert/autocert_test.go
index 725677574bb6cc..d9da8873973618 100644
--- a/acme/autocert/autocert_test.go
+++ b/acme/autocert/autocert_test.go
@@ -27,8 +27,8 @@ import (
 	"testing"
 	"time"
 
-	"golang.org/x/crypto/acme"
-	"golang.org/x/crypto/acme/autocert/internal/acmetest"
+	"github.com/dagood/x/crypto/acme"
+	"github.com/dagood/x/crypto/acme/autocert/internal/acmetest"
 )
 
 var (
diff --git a/acme/autocert/example_test.go b/acme/autocert/example_test.go
index 6c7458b0d53fcc..fe77b7677eba04 100644
--- a/acme/autocert/example_test.go
+++ b/acme/autocert/example_test.go
@@ -9,7 +9,7 @@ import (
 	"log"
 	"net/http"
 
-	"golang.org/x/crypto/acme/autocert"
+	"github.com/dagood/x/crypto/acme/autocert"
 )
 
 func ExampleNewListener() {
diff --git a/acme/autocert/internal/acmetest/ca.go b/acme/autocert/internal/acmetest/ca.go
index 0a5ebe7ab7652e..1bb1a5b6ba8c2b 100644
--- a/acme/autocert/internal/acmetest/ca.go
+++ b/acme/autocert/internal/acmetest/ca.go
@@ -34,7 +34,7 @@ import (
 	"testing"
 	"time"
 
-	"golang.org/x/crypto/acme"
+	"github.com/dagood/x/crypto/acme"
 )
 
 // CAServer is a simple test server which implements ACME spec bits needed for testing.
diff --git a/acme/autocert/renewal_test.go b/acme/autocert/renewal_test.go
index ffe4af2a5ce2f5..66c57516055360 100644
--- a/acme/autocert/renewal_test.go
+++ b/acme/autocert/renewal_test.go
@@ -11,8 +11,8 @@ import (
 	"testing"
 	"time"
 
-	"golang.org/x/crypto/acme"
-	"golang.org/x/crypto/acme/autocert/internal/acmetest"
+	"github.com/dagood/x/crypto/acme"
+	"github.com/dagood/x/crypto/acme/autocert/internal/acmetest"
 )
 
 func TestRenewalNext(t *testing.T) {
diff --git a/acme/http.go b/acme/http.go
index 58836e5d303e01..2add9ab10074b7 100644
--- a/acme/http.go
+++ b/acme/http.go
@@ -277,7 +277,7 @@ var packageVersion string
 // userAgent returns the User-Agent header value. It includes the package name,
 // the module version (if available), and the c.UserAgent value (if set).
 func (c *Client) userAgent() string {
-	ua := "golang.org/x/crypto/acme"
+	ua := "github.com/dagood/x/crypto/acme"
 	if packageVersion != "" {
 		ua += "@" + packageVersion
 	}
diff --git a/acme/http_test.go b/acme/http_test.go
index d124e4e219abe6..783e324cb3e059 100644
--- a/acme/http_test.go
+++ b/acme/http_test.go
@@ -216,7 +216,7 @@ func TestUserAgent(t *testing.T) {
 	for _, custom := range []string{"", "CUSTOM_UA"} {
 		ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
 			t.Log(r.UserAgent())
-			if s := "golang.org/x/crypto/acme"; !strings.Contains(r.UserAgent(), s) {
+			if s := "github.com/dagood/x/crypto/acme"; !strings.Contains(r.UserAgent(), s) {
 				t.Errorf("expected User-Agent to contain %q, got %q", s, r.UserAgent())
 			}
 			if !strings.Contains(r.UserAgent(), custom) {
diff --git a/acme/internal/acmeprobe/prober.go b/acme/internal/acmeprobe/prober.go
index 25dba0c50e951f..0aaa222d00f705 100644
--- a/acme/internal/acmeprobe/prober.go
+++ b/acme/internal/acmeprobe/prober.go
@@ -45,7 +45,7 @@ import (
 	"strings"
 	"time"
 
-	"golang.org/x/crypto/acme"
+	"github.com/dagood/x/crypto/acme"
 )
 
 var (
diff --git a/acme/version_go112.go b/acme/version_go112.go
index b9efdb59e5851c..960da0638034e3 100644
--- a/acme/version_go112.go
+++ b/acme/version_go112.go
@@ -17,7 +17,7 @@ func init() {
 		return
 	}
 	for _, m := range info.Deps {
-		if m.Path != "golang.org/x/crypto" {
+		if m.Path != "github.com/dagood/x/crypto" {
 			continue
 		}
 		if m.Replace == nil {
diff --git a/argon2/argon2.go b/argon2/argon2.go
index 29f0a2de4514b6..ed9055b315f673 100644
--- a/argon2/argon2.go
+++ b/argon2/argon2.go
@@ -38,7 +38,7 @@ import (
 	"encoding/binary"
 	"sync"
 
-	"golang.org/x/crypto/blake2b"
+	"github.com/dagood/x/crypto/blake2b"
 )
 
 // The Argon2 version implemented by this package.
diff --git a/argon2/blake2b.go b/argon2/blake2b.go
index 10f46948dc1053..762ee9b78afa2e 100644
--- a/argon2/blake2b.go
+++ b/argon2/blake2b.go
@@ -8,7 +8,7 @@ import (
 	"encoding/binary"
 	"hash"
 
-	"golang.org/x/crypto/blake2b"
+	"github.com/dagood/x/crypto/blake2b"
 )
 
 // blake2bHash computes an arbitrary long hash value of in
diff --git a/bcrypt/bcrypt.go b/bcrypt/bcrypt.go
index 5577c0f939a23e..4a7770b070e1bb 100644
--- a/bcrypt/bcrypt.go
+++ b/bcrypt/bcrypt.go
@@ -4,7 +4,7 @@
 
 // Package bcrypt implements Provos and Mazières's bcrypt adaptive hashing
 // algorithm. See http://www.usenix.org/event/usenix99/provos/provos.pdf
-package bcrypt // import "golang.org/x/crypto/bcrypt"
+package bcrypt // import "github.com/dagood/x/crypto/bcrypt"
 
 // The code is a port of Provos and Mazières's C implementation.
 import (
@@ -15,7 +15,7 @@ import (
 	"io"
 	"strconv"
 
-	"golang.org/x/crypto/blowfish"
+	"github.com/dagood/x/crypto/blowfish"
 )
 
 const (
diff --git a/blake2s/blake2s.go b/blake2s/blake2s.go
index e3f46aab3a1aff..c481640cdab110 100644
--- a/blake2s/blake2s.go
+++ b/blake2s/blake2s.go
@@ -16,7 +16,7 @@
 //
 // BLAKE2X is a construction to compute hash values larger than 32 bytes. It
 // can produce hash values between 0 and 65535 bytes.
-package blake2s // import "golang.org/x/crypto/blake2s"
+package blake2s // import "github.com/dagood/x/crypto/blake2s"
 
 import (
 	"encoding/binary"
diff --git a/blowfish/cipher.go b/blowfish/cipher.go
index 213bf204afea5b..d1fa4c8aad619f 100644
--- a/blowfish/cipher.go
+++ b/blowfish/cipher.go
@@ -10,8 +10,8 @@
 //
 // Deprecated: any new system should use AES (from crypto/aes, if necessary in
 // an AEAD mode like crypto/cipher.NewGCM) or XChaCha20-Poly1305 (from
-// golang.org/x/crypto/chacha20poly1305).
-package blowfish // import "golang.org/x/crypto/blowfish"
+// github.com/dagood/x/crypto/chacha20poly1305).
+package blowfish // import "github.com/dagood/x/crypto/blowfish"
 
 // The code is a port of Bruce Schneier's C implementation.
 // See https://www.schneier.com/blowfish.html.
diff --git a/bn256/bn256.go b/bn256/bn256.go
index 5d6d198bcb1c4c..d3ffb4b91faca8 100644
--- a/bn256/bn256.go
+++ b/bn256/bn256.go
@@ -23,7 +23,7 @@
 // elliptic curve. This package is frozen, and not implemented in constant time.
 // There is a more complete implementation at github.com/cloudflare/bn256, but
 // note that it suffers from the same security issues of the underlying curve.
-package bn256 // import "golang.org/x/crypto/bn256"
+package bn256 // import "github.com/dagood/x/crypto/bn256"
 
 import (
 	"crypto/rand"
diff --git a/cast5/cast5.go b/cast5/cast5.go
index 425e8eecb06beb..7ff738f89254af 100644
--- a/cast5/cast5.go
+++ b/cast5/cast5.go
@@ -10,8 +10,8 @@
 //
 // Deprecated: any new system should use AES (from crypto/aes, if necessary in
 // an AEAD mode like crypto/cipher.NewGCM) or XChaCha20-Poly1305 (from
-// golang.org/x/crypto/chacha20poly1305).
-package cast5 // import "golang.org/x/crypto/cast5"
+// github.com/dagood/x/crypto/chacha20poly1305).
+package cast5 // import "github.com/dagood/x/crypto/cast5"
 
 import (
 	"errors"
diff --git a/chacha20/chacha_generic.go b/chacha20/chacha_generic.go
index 93eb5ae6de6f33..9aaacb736a42a3 100644
--- a/chacha20/chacha_generic.go
+++ b/chacha20/chacha_generic.go
@@ -12,7 +12,7 @@ import (
 	"errors"
 	"math/bits"
 
-	"golang.org/x/crypto/internal/alias"
+	"github.com/dagood/x/crypto/internal/alias"
 )
 
 const (
@@ -68,7 +68,7 @@ var _ cipher.Stream = (*Cipher)(nil)
 // Note that ChaCha20, like all stream ciphers, is not authenticated and allows
 // attackers to silently tamper with the plaintext. For this reason, it is more
 // appropriate as a building block than as a standalone encryption mechanism.
-// Instead, consider using package golang.org/x/crypto/chacha20poly1305.
+// Instead, consider using package github.com/dagood/x/crypto/chacha20poly1305.
 func NewUnauthenticatedCipher(key, nonce []byte) (*Cipher, error) {
 	// This function is split into a wrapper so that the Cipher allocation will
 	// be inlined, and depending on how the caller uses the return value, won't
diff --git a/chacha20poly1305/chacha20poly1305.go b/chacha20poly1305/chacha20poly1305.go
index 93da7322bc48c2..7f0fd6a08431da 100644
--- a/chacha20poly1305/chacha20poly1305.go
+++ b/chacha20poly1305/chacha20poly1305.go
@@ -5,7 +5,7 @@
 // Package chacha20poly1305 implements the ChaCha20-Poly1305 AEAD and its
 // extended nonce variant XChaCha20-Poly1305, as specified in RFC 8439 and
 // draft-irtf-cfrg-xchacha-01.
-package chacha20poly1305 // import "golang.org/x/crypto/chacha20poly1305"
+package chacha20poly1305 // import "github.com/dagood/x/crypto/chacha20poly1305"
 
 import (
 	"crypto/cipher"
diff --git a/chacha20poly1305/chacha20poly1305_amd64.go b/chacha20poly1305/chacha20poly1305_amd64.go
index 0c408c57094ccb..c2e8534076adb1 100644
--- a/chacha20poly1305/chacha20poly1305_amd64.go
+++ b/chacha20poly1305/chacha20poly1305_amd64.go
@@ -10,7 +10,7 @@ package chacha20poly1305
 import (
 	"encoding/binary"
 
-	"golang.org/x/crypto/internal/alias"
+	"github.com/dagood/x/crypto/internal/alias"
 	"golang.org/x/sys/cpu"
 )
 
diff --git a/chacha20poly1305/chacha20poly1305_generic.go b/chacha20poly1305/chacha20poly1305_generic.go
index 6313898f0a75d9..02352a061c15ed 100644
--- a/chacha20poly1305/chacha20poly1305_generic.go
+++ b/chacha20poly1305/chacha20poly1305_generic.go
@@ -7,9 +7,9 @@ package chacha20poly1305
 import (
 	"encoding/binary"
 
-	"golang.org/x/crypto/chacha20"
-	"golang.org/x/crypto/internal/alias"
-	"golang.org/x/crypto/internal/poly1305"
+	"github.com/dagood/x/crypto/chacha20"
+	"github.com/dagood/x/crypto/internal/alias"
+	"github.com/dagood/x/crypto/internal/poly1305"
 )
 
 func writeWithPadding(p *poly1305.MAC, b []byte) {
diff --git a/chacha20poly1305/xchacha20poly1305.go b/chacha20poly1305/xchacha20poly1305.go
index 1cebfe946f4440..ac575cb808f4c4 100644
--- a/chacha20poly1305/xchacha20poly1305.go
+++ b/chacha20poly1305/xchacha20poly1305.go
@@ -8,7 +8,7 @@ import (
 	"crypto/cipher"
 	"errors"
 
-	"golang.org/x/crypto/chacha20"
+	"github.com/dagood/x/crypto/chacha20"
 )
 
 type xchacha20poly1305 struct {
diff --git a/cryptobyte/asn1.go b/cryptobyte/asn1.go
index 6fc2838a3fb853..4dffcea19bb036 100644
--- a/cryptobyte/asn1.go
+++ b/cryptobyte/asn1.go
@@ -11,7 +11,7 @@ import (
 	"reflect"
 	"time"
 
-	"golang.org/x/crypto/cryptobyte/asn1"
+	"github.com/dagood/x/crypto/cryptobyte/asn1"
 )
 
 // This file contains ASN.1-related methods for String and Builder.
diff --git a/cryptobyte/asn1/asn1.go b/cryptobyte/asn1/asn1.go
index cda8e3edfd5ea4..d3e9dc2b0a7b82 100644
--- a/cryptobyte/asn1/asn1.go
+++ b/cryptobyte/asn1/asn1.go
@@ -4,7 +4,7 @@
 
 // Package asn1 contains supporting types for parsing and building ASN.1
 // messages with the cryptobyte package.
-package asn1 // import "golang.org/x/crypto/cryptobyte/asn1"
+package asn1 // import "github.com/dagood/x/crypto/cryptobyte/asn1"
 
 // Tag represents an ASN.1 identifier octet, consisting of a tag number
 // (indicating a type) and class (such as context-specific or constructed).
diff --git a/cryptobyte/asn1_test.go b/cryptobyte/asn1_test.go
index e3f53a932ee847..accc70821513b2 100644
--- a/cryptobyte/asn1_test.go
+++ b/cryptobyte/asn1_test.go
@@ -12,7 +12,7 @@ import (
 	"testing"
 	"time"
 
-	"golang.org/x/crypto/cryptobyte/asn1"
+	"github.com/dagood/x/crypto/cryptobyte/asn1"
 )
 
 type readASN1Test struct {
diff --git a/cryptobyte/example_test.go b/cryptobyte/example_test.go
index 86c098adf6141e..aa880720955d78 100644
--- a/cryptobyte/example_test.go
+++ b/cryptobyte/example_test.go
@@ -8,8 +8,8 @@ import (
 	"errors"
 	"fmt"
 
-	"golang.org/x/crypto/cryptobyte"
-	"golang.org/x/crypto/cryptobyte/asn1"
+	"github.com/dagood/x/crypto/cryptobyte"
+	"github.com/dagood/x/crypto/cryptobyte/asn1"
 )
 
 func ExampleString_lengthPrefixed() {
diff --git a/cryptobyte/string.go b/cryptobyte/string.go
index 0531a3d6f1aa9e..be838cc3d533a8 100644
--- a/cryptobyte/string.go
+++ b/cryptobyte/string.go
@@ -15,7 +15,7 @@
 //
 // See the documentation and examples for the Builder and String types to get
 // started.
-package cryptobyte // import "golang.org/x/crypto/cryptobyte"
+package cryptobyte // import "github.com/dagood/x/crypto/cryptobyte"
 
 // String represents a string of bytes. It provides methods for parsing
 // fixed-length and length-prefixed values from it.
diff --git a/curve25519/curve25519.go b/curve25519/curve25519.go
index 00f963ea20a35e..83cc043dde2bcc 100644
--- a/curve25519/curve25519.go
+++ b/curve25519/curve25519.go
@@ -8,7 +8,7 @@
 //
 // Starting in Go 1.20, this package is a wrapper for the X25519 implementation
 // in the crypto/ecdh package.
-package curve25519 // import "golang.org/x/crypto/curve25519"
+package curve25519 // import "github.com/dagood/x/crypto/curve25519"
 
 // ScalarMult sets dst to the product scalar * point.
 //
diff --git a/curve25519/curve25519_compat.go b/curve25519/curve25519_compat.go
index ba647e8d77d985..69de7a860974ad 100644
--- a/curve25519/curve25519_compat.go
+++ b/curve25519/curve25519_compat.go
@@ -11,7 +11,7 @@ import (
 	"errors"
 	"strconv"
 
-	"golang.org/x/crypto/curve25519/internal/field"
+	"github.com/dagood/x/crypto/curve25519/internal/field"
 )
 
 func scalarMult(dst, scalar, point *[32]byte) {
diff --git a/curve25519/curve25519_test.go b/curve25519/curve25519_test.go
index e2b338b5ecf23d..1a6bb388216685 100644
--- a/curve25519/curve25519_test.go
+++ b/curve25519/curve25519_test.go
@@ -10,7 +10,7 @@ import (
 	"encoding/hex"
 	"testing"
 
-	"golang.org/x/crypto/curve25519"
+	"github.com/dagood/x/crypto/curve25519"
 )
 
 const expectedHex = "89161fde887b2b53de549af483940106ecc114d6982daa98256de23bdf77661a"
diff --git a/curve25519/internal/field/_asm/fe_amd64_asm.go b/curve25519/internal/field/_asm/fe_amd64_asm.go
index 1f3652987e84f8..2c7f0e792b6517 100644
--- a/curve25519/internal/field/_asm/fe_amd64_asm.go
+++ b/curve25519/internal/field/_asm/fe_amd64_asm.go
@@ -12,15 +12,15 @@ import (
 	. "github.com/mmcloughlin/avo/operand"
 	. "github.com/mmcloughlin/avo/reg"
 
-	// Ensure "go mod tidy" doesn't remove the golang.org/x/crypto module
+	// Ensure "go mod tidy" doesn't remove the github.com/dagood/x/crypto module
 	// dependency, which is necessary to access the field.Element type.
-	_ "golang.org/x/crypto/curve25519"
+	_ "github.com/dagood/x/crypto/curve25519"
 )
 
 //go:generate go run . -out ../fe_amd64.s -stubs ../fe_amd64.go -pkg field
 
 func main() {
-	Package("golang.org/x/crypto/curve25519/internal/field")
+	Package("github.com/dagood/x/crypto/curve25519/internal/field")
 	ConstraintExpr("amd64,gc,!purego")
 	feMul()
 	feSquare()
diff --git a/curve25519/internal/field/_asm/go.mod b/curve25519/internal/field/_asm/go.mod
index 5b3dba315e7f90..edd1fb1e714295 100644
--- a/curve25519/internal/field/_asm/go.mod
+++ b/curve25519/internal/field/_asm/go.mod
@@ -4,7 +4,7 @@ go 1.16
 
 require (
 	github.com/mmcloughlin/avo v0.4.0
-	golang.org/x/crypto v0.0.0
+	github.com/dagood/x/crypto v0.0.0
 )
 
-replace golang.org/x/crypto v0.0.0 => ../../../..
+replace github.com/dagood/x/crypto v0.0.0 => ../../../..
diff --git a/curve25519/internal/field/_asm/go.sum b/curve25519/internal/field/_asm/go.sum
index 4c9bbf675bc033..647ac7e0f02770 100644
--- a/curve25519/internal/field/_asm/go.sum
+++ b/curve25519/internal/field/_asm/go.sum
@@ -2,8 +2,8 @@ github.com/mmcloughlin/avo v0.4.0 h1:jeHDRktVD+578ULxWpQHkilor6pkdLF7u7EiTzDbfcU
 github.com/mmcloughlin/avo v0.4.0/go.mod h1:RW9BfYA3TgO9uCdNrKU2h6J8cPD8ZLznvfgHAeszb1s=
 github.com/yuin/goldmark v1.4.0/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=
 golang.org/x/arch v0.0.0-20210923205945-b76863e36670/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=
-golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
-golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
+github.com/dagood/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
+github.com/dagood/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/mod v0.4.2 h1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=
 golang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
diff --git a/ed25519/ed25519_test.go b/ed25519/ed25519_test.go
index ab433ba02bfb7e..6b564f3105a179 100644
--- a/ed25519/ed25519_test.go
+++ b/ed25519/ed25519_test.go
@@ -8,7 +8,7 @@ import (
 	ed25519std "crypto/ed25519"
 	"testing"
 
-	"golang.org/x/crypto/ed25519"
+	"github.com/dagood/x/crypto/ed25519"
 )
 
 func TestTypeAlias(t *testing.T) {
diff --git a/go.mod b/go.mod
index 294c7e46f65928..612feae919485f 100644
--- a/go.mod
+++ b/go.mod
@@ -1,4 +1,4 @@
-module golang.org/x/crypto
+module github.com/dagood/x/submodule/crypto
 
 go 1.17
 
diff --git a/hkdf/example_test.go b/hkdf/example_test.go
index e89c260e9b26e8..598f0144098761 100644
--- a/hkdf/example_test.go
+++ b/hkdf/example_test.go
@@ -11,7 +11,7 @@ import (
 	"fmt"
 	"io"
 
-	"golang.org/x/crypto/hkdf"
+	"github.com/dagood/x/crypto/hkdf"
 )
 
 // Usage example that expands one master secret into three other
diff --git a/hkdf/hkdf.go b/hkdf/hkdf.go
index dda3f143bec506..ea286c1c8fc5d5 100644
--- a/hkdf/hkdf.go
+++ b/hkdf/hkdf.go
@@ -8,7 +8,7 @@
 // HKDF is a cryptographic key derivation function (KDF) with the goal of
 // expanding limited input keying material into one or more cryptographically
 // strong secret keys.
-package hkdf // import "golang.org/x/crypto/hkdf"
+package hkdf // import "github.com/dagood/x/crypto/hkdf"
 
 import (
 	"crypto/hmac"
diff --git a/internal/backend/backend_disabled.go b/internal/backend/backend_disabled.go
new file mode 100644
index 00000000000000..9af3222fd95c08
--- /dev/null
+++ b/internal/backend/backend_disabled.go
@@ -0,0 +1,5 @@
+//go:build !goexperiment.systemcrypto
+
+package backend
+
+const Enabled = false
diff --git a/internal/backend/backend_enabled.go b/internal/backend/backend_enabled.go
new file mode 100644
index 00000000000000..8599596ca2d42a
--- /dev/null
+++ b/internal/backend/backend_enabled.go
@@ -0,0 +1,5 @@
+//go:build goexperiment.systemcrypto
+
+package backend
+
+const Enabled = true
diff --git a/internal/wycheproof/aead_test.go b/internal/wycheproof/aead_test.go
index 292d85425fd324..be8a20a4f94e06 100644
--- a/internal/wycheproof/aead_test.go
+++ b/internal/wycheproof/aead_test.go
@@ -11,7 +11,7 @@ import (
 	"fmt"
 	"testing"
 
-	"golang.org/x/crypto/chacha20poly1305"
+	"github.com/dagood/x/crypto/chacha20poly1305"
 )
 
 func TestAEAD(t *testing.T) {
diff --git a/internal/wycheproof/dsa_test.go b/internal/wycheproof/dsa_test.go
index e5547084605d37..5f050e8247da58 100644
--- a/internal/wycheproof/dsa_test.go
+++ b/internal/wycheproof/dsa_test.go
@@ -8,7 +8,7 @@ import (
 	"crypto/dsa"
 	"testing"
 
-	wdsa "golang.org/x/crypto/internal/wycheproof/internal/dsa"
+	wdsa "github.com/dagood/x/crypto/internal/wycheproof/internal/dsa"
 )
 
 func TestDsa(t *testing.T) {
diff --git a/internal/wycheproof/ecdh_test.go b/internal/wycheproof/ecdh_test.go
index a3918ba62f6116..c030d69913e71a 100644
--- a/internal/wycheproof/ecdh_test.go
+++ b/internal/wycheproof/ecdh_test.go
@@ -14,8 +14,8 @@ import (
 	"fmt"
 	"testing"
 
-	"golang.org/x/crypto/cryptobyte"
-	casn1 "golang.org/x/crypto/cryptobyte/asn1"
+	"github.com/dagood/x/crypto/cryptobyte"
+	casn1 "github.com/dagood/x/crypto/cryptobyte/asn1"
 )
 
 func TestECDH(t *testing.T) {
diff --git a/internal/wycheproof/ecdsa_test.go b/internal/wycheproof/ecdsa_test.go
index 80125ada75f53a..f5f1b7afd235a9 100644
--- a/internal/wycheproof/ecdsa_test.go
+++ b/internal/wycheproof/ecdsa_test.go
@@ -9,8 +9,8 @@ import (
 	"math/big"
 	"testing"
 
-	"golang.org/x/crypto/cryptobyte"
-	"golang.org/x/crypto/cryptobyte/asn1"
+	"github.com/dagood/x/crypto/cryptobyte"
+	"github.com/dagood/x/crypto/cryptobyte/asn1"
 )
 
 func TestECDSA(t *testing.T) {
diff --git a/internal/wycheproof/eddsa_test.go b/internal/wycheproof/eddsa_test.go
index 0a7fbb7e0e5de2..53864d173b3e51 100644
--- a/internal/wycheproof/eddsa_test.go
+++ b/internal/wycheproof/eddsa_test.go
@@ -10,7 +10,7 @@ package wycheproof
 import (
 	"testing"
 
-	"golang.org/x/crypto/ed25519"
+	"github.com/dagood/x/crypto/ed25519"
 )
 
 func TestEddsa(t *testing.T) {
diff --git a/internal/wycheproof/hkdf_test.go b/internal/wycheproof/hkdf_test.go
index 6b72e2c870eb5b..5470adf335e7dd 100644
--- a/internal/wycheproof/hkdf_test.go
+++ b/internal/wycheproof/hkdf_test.go
@@ -9,7 +9,7 @@ import (
 	"io"
 	"testing"
 
-	"golang.org/x/crypto/hkdf"
+	"github.com/dagood/x/crypto/hkdf"
 )
 
 func TestHkdf(t *testing.T) {
diff --git a/internal/wycheproof/internal/dsa/dsa.go b/internal/wycheproof/internal/dsa/dsa.go
index 3101dfc1c23e51..3afe7dac2500ce 100644
--- a/internal/wycheproof/internal/dsa/dsa.go
+++ b/internal/wycheproof/internal/dsa/dsa.go
@@ -10,8 +10,8 @@ import (
 	"crypto/dsa"
 	"math/big"
 
-	"golang.org/x/crypto/cryptobyte"
-	"golang.org/x/crypto/cryptobyte/asn1"
+	"github.com/dagood/x/crypto/cryptobyte"
+	"github.com/dagood/x/crypto/cryptobyte/asn1"
 )
 
 // VerifyASN1 verifies the ASN1 encoded signature, sig, of hash using the
diff --git a/md4/example_test.go b/md4/example_test.go
index db3f59b19bce54..e20c0dda1297b8 100644
--- a/md4/example_test.go
+++ b/md4/example_test.go
@@ -8,7 +8,7 @@ import (
 	"fmt"
 	"io"
 
-	"golang.org/x/crypto/md4"
+	"github.com/dagood/x/crypto/md4"
 )
 
 func ExampleNew() {
diff --git a/md4/md4.go b/md4/md4.go
index 59d3480693050f..9d7f4dab706d76 100644
--- a/md4/md4.go
+++ b/md4/md4.go
@@ -7,7 +7,7 @@
 // Deprecated: MD4 is cryptographically broken and should should only be used
 // where compatibility with legacy systems, not security, is the goal. Instead,
 // use a secure hash like SHA-256 (from crypto/sha256).
-package md4 // import "golang.org/x/crypto/md4"
+package md4 // import "github.com/dagood/x/crypto/md4"
 
 import (
 	"crypto"
diff --git a/nacl/auth/example_test.go b/nacl/auth/example_test.go
index 02a2cd6c46a8f4..1091ffcf298851 100644
--- a/nacl/auth/example_test.go
+++ b/nacl/auth/example_test.go
@@ -8,7 +8,7 @@ import (
 	"encoding/hex"
 	"fmt"
 
-	"golang.org/x/crypto/nacl/auth"
+	"github.com/dagood/x/crypto/nacl/auth"
 )
 
 func Example() {
diff --git a/nacl/box/box.go b/nacl/box/box.go
index 7f3b830ee22f96..65881b6233552c 100644
--- a/nacl/box/box.go
+++ b/nacl/box/box.go
@@ -35,16 +35,16 @@ Anonymous sealing/opening is an extension of NaCl defined by and interoperable
 with libsodium:
 https://libsodium.gitbook.io/doc/public-key_cryptography/sealed_boxes.
 */
-package box // import "golang.org/x/crypto/nacl/box"
+package box // import "github.com/dagood/x/crypto/nacl/box"
 
 import (
 	cryptorand "crypto/rand"
 	"io"
 
-	"golang.org/x/crypto/blake2b"
-	"golang.org/x/crypto/curve25519"
-	"golang.org/x/crypto/nacl/secretbox"
-	"golang.org/x/crypto/salsa20/salsa"
+	"github.com/dagood/x/crypto/blake2b"
+	"github.com/dagood/x/crypto/curve25519"
+	"github.com/dagood/x/crypto/nacl/secretbox"
+	"github.com/dagood/x/crypto/salsa20/salsa"
 )
 
 const (
diff --git a/nacl/box/box_test.go b/nacl/box/box_test.go
index cce1f3b4da1a20..8923e6957f7c34 100644
--- a/nacl/box/box_test.go
+++ b/nacl/box/box_test.go
@@ -10,7 +10,7 @@ import (
 	"encoding/hex"
 	"testing"
 
-	"golang.org/x/crypto/curve25519"
+	"github.com/dagood/x/crypto/curve25519"
 )
 
 func TestSealOpen(t *testing.T) {
diff --git a/nacl/box/example_test.go b/nacl/box/example_test.go
index 25e42d2be9aa80..42cbda7db4629d 100644
--- a/nacl/box/example_test.go
+++ b/nacl/box/example_test.go
@@ -5,7 +5,7 @@ import (
 	"fmt"
 	"io"
 
-	"golang.org/x/crypto/nacl/box"
+	"github.com/dagood/x/crypto/nacl/box"
 )
 
 func Example() {
diff --git a/nacl/secretbox/example_test.go b/nacl/secretbox/example_test.go
index 789f4ff03f2ff8..e456d45f500e7d 100644
--- a/nacl/secretbox/example_test.go
+++ b/nacl/secretbox/example_test.go
@@ -10,7 +10,7 @@ import (
 	"fmt"
 	"io"
 
-	"golang.org/x/crypto/nacl/secretbox"
+	"github.com/dagood/x/crypto/nacl/secretbox"
 )
 
 func Example() {
diff --git a/nacl/secretbox/secretbox.go b/nacl/secretbox/secretbox.go
index f3c3242a0471da..6db8571457fd6a 100644
--- a/nacl/secretbox/secretbox.go
+++ b/nacl/secretbox/secretbox.go
@@ -32,12 +32,12 @@ chunk size.
 
 This package is interoperable with NaCl: https://nacl.cr.yp.to/secretbox.html.
 */
-package secretbox // import "golang.org/x/crypto/nacl/secretbox"
+package secretbox // import "github.com/dagood/x/crypto/nacl/secretbox"
 
 import (
-	"golang.org/x/crypto/internal/alias"
-	"golang.org/x/crypto/internal/poly1305"
-	"golang.org/x/crypto/salsa20/salsa"
+	"github.com/dagood/x/crypto/internal/alias"
+	"github.com/dagood/x/crypto/internal/poly1305"
+	"github.com/dagood/x/crypto/salsa20/salsa"
 )
 
 // Overhead is the number of bytes of overhead when boxing a message.
diff --git a/nacl/sign/sign.go b/nacl/sign/sign.go
index 8a6acdcc090abf..b3c9909c5ede1d 100644
--- a/nacl/sign/sign.go
+++ b/nacl/sign/sign.go
@@ -23,8 +23,8 @@ package sign
 import (
 	"io"
 
-	"golang.org/x/crypto/ed25519"
-	"golang.org/x/crypto/internal/alias"
+	"github.com/dagood/x/crypto/ed25519"
+	"github.com/dagood/x/crypto/internal/alias"
 )
 
 // Overhead is the number of bytes of overhead when signing a message.
diff --git a/ocsp/ocsp.go b/ocsp/ocsp.go
index 4269ed113be905..aa0fa0cb8a4ce9 100644
--- a/ocsp/ocsp.go
+++ b/ocsp/ocsp.go
@@ -5,7 +5,7 @@
 // Package ocsp parses OCSP responses as specified in RFC 2560. OCSP responses
 // are signed messages attesting to the validity of a certificate for a small
 // period of time. This is used to manage revocation for X.509 certificates.
-package ocsp // import "golang.org/x/crypto/ocsp"
+package ocsp // import "github.com/dagood/x/crypto/ocsp"
 
 import (
 	"crypto"
diff --git a/openpgp/armor/armor.go b/openpgp/armor/armor.go
index 8907183ec0ab9c..2d2fc2ff9e30dd 100644
--- a/openpgp/armor/armor.go
+++ b/openpgp/armor/armor.go
@@ -10,14 +10,15 @@
 // for their specific task. If you are required to interoperate with OpenPGP
 // systems and need a maintained package, consider a community fork.
 // See https://golang.org/issue/44226.
-package armor // import "golang.org/x/crypto/openpgp/armor"
+package armor // import "github.com/dagood/x/crypto/openpgp/armor"
 
 import (
 	"bufio"
 	"bytes"
 	"encoding/base64"
-	"golang.org/x/crypto/openpgp/errors"
 	"io"
+
+	"github.com/dagood/x/crypto/openpgp/errors"
 )
 
 // A Block represents an OpenPGP armored structure.
diff --git a/openpgp/clearsign/clearsign.go b/openpgp/clearsign/clearsign.go
index 644b2e078bc9c8..e0584d46222da5 100644
--- a/openpgp/clearsign/clearsign.go
+++ b/openpgp/clearsign/clearsign.go
@@ -13,7 +13,7 @@
 // for their specific task. If you are required to interoperate with OpenPGP
 // systems and need a maintained package, consider a community fork.
 // See https://golang.org/issue/44226.
-package clearsign // import "golang.org/x/crypto/openpgp/clearsign"
+package clearsign // import "github.com/dagood/x/crypto/openpgp/clearsign"
 
 import (
 	"bufio"
@@ -26,9 +26,9 @@ import (
 	"strconv"
 	"strings"
 
-	"golang.org/x/crypto/openpgp/armor"
-	"golang.org/x/crypto/openpgp/errors"
-	"golang.org/x/crypto/openpgp/packet"
+	"github.com/dagood/x/crypto/openpgp/armor"
+	"github.com/dagood/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/packet"
 )
 
 // A Block represents a clearsigned message. A signature on a Block can
diff --git a/openpgp/clearsign/clearsign_test.go b/openpgp/clearsign/clearsign_test.go
index 051b8f16ffa3b4..5065ed3be6610e 100644
--- a/openpgp/clearsign/clearsign_test.go
+++ b/openpgp/clearsign/clearsign_test.go
@@ -10,8 +10,8 @@ import (
 	"io"
 	"testing"
 
-	"golang.org/x/crypto/openpgp"
-	"golang.org/x/crypto/openpgp/packet"
+	"github.com/dagood/x/crypto/openpgp"
+	"github.com/dagood/x/crypto/openpgp/packet"
 )
 
 func testParse(t *testing.T, input []byte, expected, expectedPlaintext string) {
diff --git a/openpgp/elgamal/elgamal.go b/openpgp/elgamal/elgamal.go
index 743b35a1204f5f..73786db33afc21 100644
--- a/openpgp/elgamal/elgamal.go
+++ b/openpgp/elgamal/elgamal.go
@@ -12,11 +12,11 @@
 // case.
 //
 // Deprecated: this package was only provided to support ElGamal encryption in
-// OpenPGP. The golang.org/x/crypto/openpgp package is now deprecated (see
+// OpenPGP. The github.com/dagood/x/crypto/openpgp package is now deprecated (see
 // https://golang.org/issue/44226), and ElGamal in the OpenPGP ecosystem has
 // compatibility and security issues (see https://eprint.iacr.org/2021/923).
 // Moreover, this package doesn't protect against side-channel attacks.
-package elgamal // import "golang.org/x/crypto/openpgp/elgamal"
+package elgamal // import "github.com/dagood/x/crypto/openpgp/elgamal"
 
 import (
 	"crypto/rand"
diff --git a/openpgp/errors/errors.go b/openpgp/errors/errors.go
index 1d7a0ea05adf17..e0337982d3a411 100644
--- a/openpgp/errors/errors.go
+++ b/openpgp/errors/errors.go
@@ -9,7 +9,7 @@
 // for their specific task. If you are required to interoperate with OpenPGP
 // systems and need a maintained package, consider a community fork.
 // See https://golang.org/issue/44226.
-package errors // import "golang.org/x/crypto/openpgp/errors"
+package errors // import "github.com/dagood/x/crypto/openpgp/errors"
 
 import (
 	"strconv"
diff --git a/openpgp/keys.go b/openpgp/keys.go
index d62f787e9d5a36..ea3c12d1b023aa 100644
--- a/openpgp/keys.go
+++ b/openpgp/keys.go
@@ -9,9 +9,9 @@ import (
 	"io"
 	"time"
 
-	"golang.org/x/crypto/openpgp/armor"
-	"golang.org/x/crypto/openpgp/errors"
-	"golang.org/x/crypto/openpgp/packet"
+	"github.com/dagood/x/crypto/openpgp/armor"
+	"github.com/dagood/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/packet"
 )
 
 // PublicKeyType is the armor type for a PGP public key.
diff --git a/openpgp/keys_test.go b/openpgp/keys_test.go
index 0eb1a9ef29704e..afdc9b4676c4e9 100644
--- a/openpgp/keys_test.go
+++ b/openpgp/keys_test.go
@@ -7,8 +7,8 @@ import (
 	"testing"
 	"time"
 
-	"golang.org/x/crypto/openpgp/errors"
-	"golang.org/x/crypto/openpgp/packet"
+	"github.com/dagood/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/packet"
 )
 
 func TestKeyExpiry(t *testing.T) {
diff --git a/openpgp/packet/compressed.go b/openpgp/packet/compressed.go
index 353f945247cfdc..e5e7fec9442465 100644
--- a/openpgp/packet/compressed.go
+++ b/openpgp/packet/compressed.go
@@ -8,9 +8,10 @@ import (
 	"compress/bzip2"
 	"compress/flate"
 	"compress/zlib"
-	"golang.org/x/crypto/openpgp/errors"
 	"io"
 	"strconv"
+
+	"github.com/dagood/x/crypto/openpgp/errors"
 )
 
 // Compressed represents a compressed OpenPGP packet. The decompressed contents
diff --git a/openpgp/packet/encrypted_key.go b/openpgp/packet/encrypted_key.go
index 6d7639722c906b..e53dce1474809c 100644
--- a/openpgp/packet/encrypted_key.go
+++ b/openpgp/packet/encrypted_key.go
@@ -12,8 +12,8 @@ import (
 	"math/big"
 	"strconv"
 
-	"golang.org/x/crypto/openpgp/elgamal"
-	"golang.org/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/elgamal"
+	"github.com/dagood/x/crypto/openpgp/errors"
 )
 
 const encryptedKeyVersion = 3
diff --git a/openpgp/packet/one_pass_signature.go b/openpgp/packet/one_pass_signature.go
index 1713503395e3c8..13dab19a17a175 100644
--- a/openpgp/packet/one_pass_signature.go
+++ b/openpgp/packet/one_pass_signature.go
@@ -7,10 +7,11 @@ package packet
 import (
 	"crypto"
 	"encoding/binary"
-	"golang.org/x/crypto/openpgp/errors"
-	"golang.org/x/crypto/openpgp/s2k"
 	"io"
 	"strconv"
+
+	"github.com/dagood/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/s2k"
 )
 
 // OnePassSignature represents a one-pass signature packet. See RFC 4880,
diff --git a/openpgp/packet/opaque.go b/openpgp/packet/opaque.go
index 3984477310fe70..73e32a90077ba2 100644
--- a/openpgp/packet/opaque.go
+++ b/openpgp/packet/opaque.go
@@ -8,7 +8,7 @@ import (
 	"bytes"
 	"io"
 
-	"golang.org/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/errors"
 )
 
 // OpaquePacket represents an OpenPGP packet as raw, unparsed data. This is
diff --git a/openpgp/packet/packet.go b/openpgp/packet/packet.go
index 0a19794a8e49c1..0f5c114616180a 100644
--- a/openpgp/packet/packet.go
+++ b/openpgp/packet/packet.go
@@ -10,7 +10,7 @@
 // for their specific task. If you are required to interoperate with OpenPGP
 // systems and need a maintained package, consider a community fork.
 // See https://golang.org/issue/44226.
-package packet // import "golang.org/x/crypto/openpgp/packet"
+package packet // import "github.com/dagood/x/crypto/openpgp/packet"
 
 import (
 	"bufio"
@@ -22,8 +22,8 @@ import (
 	"math/big"
 	"math/bits"
 
-	"golang.org/x/crypto/cast5"
-	"golang.org/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/cast5"
+	"github.com/dagood/x/crypto/openpgp/errors"
 )
 
 // readFull is the same as io.ReadFull except that reading zero bytes returns
diff --git a/openpgp/packet/packet_test.go b/openpgp/packet/packet_test.go
index c8fc4e50c0b994..4d10b16ee3f115 100644
--- a/openpgp/packet/packet_test.go
+++ b/openpgp/packet/packet_test.go
@@ -8,9 +8,10 @@ import (
 	"bytes"
 	"encoding/hex"
 	"fmt"
-	"golang.org/x/crypto/openpgp/errors"
 	"io"
 	"testing"
+
+	"github.com/dagood/x/crypto/openpgp/errors"
 )
 
 func TestReadFull(t *testing.T) {
diff --git a/openpgp/packet/private_key.go b/openpgp/packet/private_key.go
index 192aac376d1af0..2657ce5baf25f3 100644
--- a/openpgp/packet/private_key.go
+++ b/openpgp/packet/private_key.go
@@ -17,9 +17,9 @@ import (
 	"strconv"
 	"time"
 
-	"golang.org/x/crypto/openpgp/elgamal"
-	"golang.org/x/crypto/openpgp/errors"
-	"golang.org/x/crypto/openpgp/s2k"
+	"github.com/dagood/x/crypto/openpgp/elgamal"
+	"github.com/dagood/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/s2k"
 )
 
 // PrivateKey represents a possibly encrypted private key. See RFC 4880,
diff --git a/openpgp/packet/public_key.go b/openpgp/packet/public_key.go
index fcd5f5251963b3..8a7eccc89c166a 100644
--- a/openpgp/packet/public_key.go
+++ b/openpgp/packet/public_key.go
@@ -22,8 +22,8 @@ import (
 	"strconv"
 	"time"
 
-	"golang.org/x/crypto/openpgp/elgamal"
-	"golang.org/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/elgamal"
+	"github.com/dagood/x/crypto/openpgp/errors"
 )
 
 var (
diff --git a/openpgp/packet/public_key_v3.go b/openpgp/packet/public_key_v3.go
index 5daf7b6cfd4a06..467cc587925bae 100644
--- a/openpgp/packet/public_key_v3.go
+++ b/openpgp/packet/public_key_v3.go
@@ -16,7 +16,7 @@ import (
 	"strconv"
 	"time"
 
-	"golang.org/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/errors"
 )
 
 // PublicKeyV3 represents older, version 3 public keys. These keys are less secure and
diff --git a/openpgp/packet/reader.go b/openpgp/packet/reader.go
index 34bc7c613e6e23..0c7e66e0bd4936 100644
--- a/openpgp/packet/reader.go
+++ b/openpgp/packet/reader.go
@@ -5,8 +5,9 @@
 package packet
 
 import (
-	"golang.org/x/crypto/openpgp/errors"
 	"io"
+
+	"github.com/dagood/x/crypto/openpgp/errors"
 )
 
 // Reader reads packets from an io.Reader and allows packets to be 'unread' so
diff --git a/openpgp/packet/signature.go b/openpgp/packet/signature.go
index b2a24a532327b5..17b0b26c8b635b 100644
--- a/openpgp/packet/signature.go
+++ b/openpgp/packet/signature.go
@@ -17,8 +17,8 @@ import (
 	"strconv"
 	"time"
 
-	"golang.org/x/crypto/openpgp/errors"
-	"golang.org/x/crypto/openpgp/s2k"
+	"github.com/dagood/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/s2k"
 )
 
 const (
diff --git a/openpgp/packet/signature_v3.go b/openpgp/packet/signature_v3.go
index 6edff889349b3f..25c4bb4905c372 100644
--- a/openpgp/packet/signature_v3.go
+++ b/openpgp/packet/signature_v3.go
@@ -12,8 +12,8 @@ import (
 	"strconv"
 	"time"
 
-	"golang.org/x/crypto/openpgp/errors"
-	"golang.org/x/crypto/openpgp/s2k"
+	"github.com/dagood/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/s2k"
 )
 
 // SignatureV3 represents older version 3 signatures. These signatures are less secure
diff --git a/openpgp/packet/signature_v3_test.go b/openpgp/packet/signature_v3_test.go
index abb2d8c14496f8..1fa7c303c1337f 100644
--- a/openpgp/packet/signature_v3_test.go
+++ b/openpgp/packet/signature_v3_test.go
@@ -11,7 +11,7 @@ import (
 	"io"
 	"testing"
 
-	"golang.org/x/crypto/openpgp/armor"
+	"github.com/dagood/x/crypto/openpgp/armor"
 )
 
 func TestSignatureV3Read(t *testing.T) {
diff --git a/openpgp/packet/symmetric_key_encrypted.go b/openpgp/packet/symmetric_key_encrypted.go
index 744c2d2c42dc5e..a19ddad57a006c 100644
--- a/openpgp/packet/symmetric_key_encrypted.go
+++ b/openpgp/packet/symmetric_key_encrypted.go
@@ -10,8 +10,8 @@ import (
 	"io"
 	"strconv"
 
-	"golang.org/x/crypto/openpgp/errors"
-	"golang.org/x/crypto/openpgp/s2k"
+	"github.com/dagood/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/s2k"
 )
 
 // This is the largest session key that we'll support. Since no 512-bit cipher
diff --git a/openpgp/packet/symmetrically_encrypted.go b/openpgp/packet/symmetrically_encrypted.go
index 1a1a62964fc952..07b7c01500fefe 100644
--- a/openpgp/packet/symmetrically_encrypted.go
+++ b/openpgp/packet/symmetrically_encrypted.go
@@ -8,10 +8,11 @@ import (
 	"crypto/cipher"
 	"crypto/sha1"
 	"crypto/subtle"
-	"golang.org/x/crypto/openpgp/errors"
 	"hash"
 	"io"
 	"strconv"
+
+	"github.com/dagood/x/crypto/openpgp/errors"
 )
 
 // SymmetricallyEncrypted represents a symmetrically encrypted byte string. The
diff --git a/openpgp/packet/symmetrically_encrypted_test.go b/openpgp/packet/symmetrically_encrypted_test.go
index 4c47c7b145a0f2..594a896a8539bd 100644
--- a/openpgp/packet/symmetrically_encrypted_test.go
+++ b/openpgp/packet/symmetrically_encrypted_test.go
@@ -8,9 +8,10 @@ import (
 	"bytes"
 	"crypto/sha1"
 	"encoding/hex"
-	"golang.org/x/crypto/openpgp/errors"
 	"io"
 	"testing"
+
+	"github.com/dagood/x/crypto/openpgp/errors"
 )
 
 // TestReader wraps a []byte and returns reads of a specific length.
diff --git a/openpgp/read.go b/openpgp/read.go
index 48a893146858ca..2da9d95e4a6085 100644
--- a/openpgp/read.go
+++ b/openpgp/read.go
@@ -9,7 +9,7 @@
 // for their specific task. If you are required to interoperate with OpenPGP
 // systems and need a maintained package, consider a community fork.
 // See https://golang.org/issue/44226.
-package openpgp // import "golang.org/x/crypto/openpgp"
+package openpgp // import "github.com/dagood/x/crypto/openpgp"
 
 import (
 	"crypto"
@@ -18,9 +18,9 @@ import (
 	"io"
 	"strconv"
 
-	"golang.org/x/crypto/openpgp/armor"
-	"golang.org/x/crypto/openpgp/errors"
-	"golang.org/x/crypto/openpgp/packet"
+	"github.com/dagood/x/crypto/openpgp/armor"
+	"github.com/dagood/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/packet"
 )
 
 // SignatureType is the armor type for a PGP signature.
diff --git a/openpgp/read_test.go b/openpgp/read_test.go
index 6bbfaf1afb4894..06317ca2209139 100644
--- a/openpgp/read_test.go
+++ b/openpgp/read_test.go
@@ -12,8 +12,8 @@ import (
 	"strings"
 	"testing"
 
-	"golang.org/x/crypto/openpgp/armor"
-	"golang.org/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/armor"
+	"github.com/dagood/x/crypto/openpgp/errors"
 )
 
 func readerFromHex(s string) io.Reader {
diff --git a/openpgp/s2k/s2k.go b/openpgp/s2k/s2k.go
index f53244a1c7b538..ab5ab4109acf9d 100644
--- a/openpgp/s2k/s2k.go
+++ b/openpgp/s2k/s2k.go
@@ -10,7 +10,7 @@
 // for their specific task. If you are required to interoperate with OpenPGP
 // systems and need a maintained package, consider a community fork.
 // See https://golang.org/issue/44226.
-package s2k // import "golang.org/x/crypto/openpgp/s2k"
+package s2k // import "github.com/dagood/x/crypto/openpgp/s2k"
 
 import (
 	"crypto"
@@ -18,7 +18,7 @@ import (
 	"io"
 	"strconv"
 
-	"golang.org/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/errors"
 )
 
 // Config collects configuration parameters for s2k key-stretching
diff --git a/openpgp/s2k/s2k_test.go b/openpgp/s2k/s2k_test.go
index 183d26056b11e4..1a1b952102c741 100644
--- a/openpgp/s2k/s2k_test.go
+++ b/openpgp/s2k/s2k_test.go
@@ -15,7 +15,7 @@ import (
 	"encoding/hex"
 	"testing"
 
-	_ "golang.org/x/crypto/ripemd160"
+	_ "github.com/dagood/x/crypto/ripemd160"
 )
 
 var saltedTests = []struct {
diff --git a/openpgp/write.go b/openpgp/write.go
index b89d48b81d7370..40183133250eb5 100644
--- a/openpgp/write.go
+++ b/openpgp/write.go
@@ -11,10 +11,10 @@ import (
 	"strconv"
 	"time"
 
-	"golang.org/x/crypto/openpgp/armor"
-	"golang.org/x/crypto/openpgp/errors"
-	"golang.org/x/crypto/openpgp/packet"
-	"golang.org/x/crypto/openpgp/s2k"
+	"github.com/dagood/x/crypto/openpgp/armor"
+	"github.com/dagood/x/crypto/openpgp/errors"
+	"github.com/dagood/x/crypto/openpgp/packet"
+	"github.com/dagood/x/crypto/openpgp/s2k"
 )
 
 // DetachSign signs message with the private key from signer (which must
diff --git a/openpgp/write_test.go b/openpgp/write_test.go
index 8b686789ee5f34..79369d36856ad4 100644
--- a/openpgp/write_test.go
+++ b/openpgp/write_test.go
@@ -10,7 +10,7 @@ import (
 	"testing"
 	"time"
 
-	"golang.org/x/crypto/openpgp/packet"
+	"github.com/dagood/x/crypto/openpgp/packet"
 )
 
 func TestSignDetached(t *testing.T) {
diff --git a/otr/otr.go b/otr/otr.go
index 29121e9bb653ac..28be4b7c1746d7 100644
--- a/otr/otr.go
+++ b/otr/otr.go
@@ -8,7 +8,7 @@
 // The version of OTR implemented by this package has been deprecated
 // (https://bugs.otr.im/lib/libotr/issues/140). An implementation of OTRv3 is
 // available at https://github.com/coyim/otr3.
-package otr // import "golang.org/x/crypto/otr"
+package otr // import "github.com/dagood/x/crypto/otr"
 
 import (
 	"bytes"
diff --git a/pbkdf2/pbkdf2.go b/pbkdf2/pbkdf2.go
index 904b57e01d7a50..5bb7f3ce61f71c 100644
--- a/pbkdf2/pbkdf2.go
+++ b/pbkdf2/pbkdf2.go
@@ -16,7 +16,7 @@ Hash Functions SHA-1, SHA-224, SHA-256, SHA-384 and SHA-512 for HMAC. To
 choose, you can pass the `New` functions from the different SHA packages to
 pbkdf2.Key.
 */
-package pbkdf2 // import "golang.org/x/crypto/pbkdf2"
+package pbkdf2 // import "github.com/dagood/x/crypto/pbkdf2"
 
 import (
 	"crypto/hmac"
diff --git a/pkcs12/crypto.go b/pkcs12/crypto.go
index 96f4a1a56ecacd..24c6eb0d55957b 100644
--- a/pkcs12/crypto.go
+++ b/pkcs12/crypto.go
@@ -12,7 +12,7 @@ import (
 	"encoding/asn1"
 	"errors"
 
-	"golang.org/x/crypto/pkcs12/internal/rc2"
+	"github.com/dagood/x/crypto/pkcs12/internal/rc2"
 )
 
 var (
diff --git a/poly1305/poly1305_compat.go b/poly1305/poly1305_compat.go
index dd975a32c988a1..d2b9fcd96b3524 100644
--- a/poly1305/poly1305_compat.go
+++ b/poly1305/poly1305_compat.go
@@ -19,15 +19,15 @@
 // Deprecated: Poly1305 as implemented by this package is a cryptographic
 // building block that is not safe for general purpose use.
 // For encryption, use the full ChaCha20-Poly1305 construction implemented by
-// golang.org/x/crypto/chacha20poly1305. For authentication, use a general
+// github.com/dagood/x/crypto/chacha20poly1305. For authentication, use a general
 // purpose MAC such as HMAC implemented by crypto/hmac.
-package poly1305 // import "golang.org/x/crypto/poly1305"
+package poly1305 // import "github.com/dagood/x/crypto/poly1305"
 
-import "golang.org/x/crypto/internal/poly1305"
+import "github.com/dagood/x/crypto/internal/poly1305"
 
 // TagSize is the size, in bytes, of a poly1305 authenticator.
 //
-// For use with golang.org/x/crypto/chacha20poly1305, chacha20poly1305.Overhead
+// For use with github.com/dagood/x/crypto/chacha20poly1305, chacha20poly1305.Overhead
 // can be used instead.
 const TagSize = 16
 
diff --git a/ripemd160/ripemd160.go b/ripemd160/ripemd160.go
index cf3eeb158a9c60..6e169b11375053 100644
--- a/ripemd160/ripemd160.go
+++ b/ripemd160/ripemd160.go
@@ -7,7 +7,7 @@
 // Deprecated: RIPEMD-160 is a legacy hash and should not be used for new
 // applications. Also, this package does not and will not provide an optimized
 // implementation. Instead, use a modern hash like SHA-256 (from crypto/sha256).
-package ripemd160 // import "golang.org/x/crypto/ripemd160"
+package ripemd160 // import "github.com/dagood/x/crypto/ripemd160"
 
 // RIPEMD-160 is designed by Hans Dobbertin, Antoon Bosselaers, and Bart
 // Preneel with specifications available at:
diff --git a/salsa20/salsa/hsalsa20.go b/salsa20/salsa/hsalsa20.go
index 3fd05b27516987..95deceb8d2bd60 100644
--- a/salsa20/salsa/hsalsa20.go
+++ b/salsa20/salsa/hsalsa20.go
@@ -3,7 +3,7 @@
 // license that can be found in the LICENSE file.
 
 // Package salsa provides low-level access to functions in the Salsa family.
-package salsa // import "golang.org/x/crypto/salsa20/salsa"
+package salsa // import "github.com/dagood/x/crypto/salsa20/salsa"
 
 import "math/bits"
 
diff --git a/salsa20/salsa20.go b/salsa20/salsa20.go
index 8f4f896c70d3f0..5d963fe6f22286 100644
--- a/salsa20/salsa20.go
+++ b/salsa20/salsa20.go
@@ -19,13 +19,13 @@ This package also implements XSalsa20: a version of Salsa20 with a 24-byte
 nonce as specified in https://cr.yp.to/snuffle/xsalsa-20081128.pdf. Simply
 passing a 24-byte slice as the nonce triggers XSalsa20.
 */
-package salsa20 // import "golang.org/x/crypto/salsa20"
+package salsa20 // import "github.com/dagood/x/crypto/salsa20"
 
 // TODO(agl): implement XORKeyStream12 and XORKeyStream8 - the reduced round variants of Salsa20.
 
 import (
-	"golang.org/x/crypto/internal/alias"
-	"golang.org/x/crypto/salsa20/salsa"
+	"github.com/dagood/x/crypto/internal/alias"
+	"github.com/dagood/x/crypto/salsa20/salsa"
 )
 
 // XORKeyStream crypts bytes from in to out using the given key and nonce.
diff --git a/scrypt/example_test.go b/scrypt/example_test.go
index 6736479b196153..66fde01daa038a 100644
--- a/scrypt/example_test.go
+++ b/scrypt/example_test.go
@@ -9,7 +9,7 @@ import (
 	"fmt"
 	"log"
 
-	"golang.org/x/crypto/scrypt"
+	"github.com/dagood/x/crypto/scrypt"
 )
 
 func Example() {
diff --git a/scrypt/scrypt.go b/scrypt/scrypt.go
index c971a99fa67982..c3c9f58f8fcb4c 100644
--- a/scrypt/scrypt.go
+++ b/scrypt/scrypt.go
@@ -5,7 +5,7 @@
 // Package scrypt implements the scrypt key derivation function as defined in
 // Colin Percival's paper "Stronger Key Derivation via Sequential Memory-Hard
 // Functions" (https://www.tarsnap.com/scrypt/scrypt.pdf).
-package scrypt // import "golang.org/x/crypto/scrypt"
+package scrypt // import "github.com/dagood/x/crypto/scrypt"
 
 import (
 	"crypto/sha256"
@@ -13,7 +13,7 @@ import (
 	"errors"
 	"math/bits"
 
-	"golang.org/x/crypto/pbkdf2"
+	"github.com/dagood/x/crypto/pbkdf2"
 )
 
 const maxInt = int(^uint(0) >> 1)
diff --git a/sha3/doc.go b/sha3/doc.go
index decd8cf9bf7491..eb75a6ae88b04f 100644
--- a/sha3/doc.go
+++ b/sha3/doc.go
@@ -59,4 +59,4 @@
 // They produce output of the same length, with the same security strengths
 // against all attacks. This means, in particular, that SHA3-256 only has
 // 128-bit collision resistance, because its output length is 32 bytes.
-package sha3 // import "golang.org/x/crypto/sha3"
+package sha3 // import "github.com/dagood/x/crypto/sha3"
diff --git a/ssh/agent/client.go b/ssh/agent/client.go
index c3e112a9396121..dfafacb46c5a4a 100644
--- a/ssh/agent/client.go
+++ b/ssh/agent/client.go
@@ -10,7 +10,7 @@
 // References:
 //
 //	[PROTOCOL.agent]: https://tools.ietf.org/html/draft-miller-ssh-agent-00
-package agent // import "golang.org/x/crypto/ssh/agent"
+package agent // import "github.com/dagood/x/crypto/ssh/agent"
 
 import (
 	"bytes"
@@ -26,8 +26,8 @@ import (
 	"math/big"
 	"sync"
 
-	"golang.org/x/crypto/ed25519"
-	"golang.org/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ed25519"
+	"github.com/dagood/x/crypto/ssh"
 )
 
 // SignatureFlags represent additional flags that can be passed to the signature
diff --git a/ssh/agent/client_test.go b/ssh/agent/client_test.go
index fdc8000654c6f3..13fbffec697486 100644
--- a/ssh/agent/client_test.go
+++ b/ssh/agent/client_test.go
@@ -19,7 +19,7 @@ import (
 	"testing"
 	"time"
 
-	"golang.org/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ssh"
 )
 
 // startOpenSSHAgent executes ssh-agent, and returns an Agent interface to it.
diff --git a/ssh/agent/example_test.go b/ssh/agent/example_test.go
index 1fedaea1d6c9c4..519d085e4f3afe 100644
--- a/ssh/agent/example_test.go
+++ b/ssh/agent/example_test.go
@@ -9,8 +9,8 @@ import (
 	"net"
 	"os"
 
-	"golang.org/x/crypto/ssh"
-	"golang.org/x/crypto/ssh/agent"
+	"github.com/dagood/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ssh/agent"
 )
 
 func ExampleNewClient() {
diff --git a/ssh/agent/forward.go b/ssh/agent/forward.go
index fd24ba900d2541..a1fcaaa70eaab6 100644
--- a/ssh/agent/forward.go
+++ b/ssh/agent/forward.go
@@ -10,7 +10,7 @@ import (
 	"net"
 	"sync"
 
-	"golang.org/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ssh"
 )
 
 // RequestAgentForwarding sets up agent forwarding for the session.
diff --git a/ssh/agent/keyring.go b/ssh/agent/keyring.go
index 21bfa870fa4dd2..600146de40483c 100644
--- a/ssh/agent/keyring.go
+++ b/ssh/agent/keyring.go
@@ -13,7 +13,7 @@ import (
 	"sync"
 	"time"
 
-	"golang.org/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ssh"
 )
 
 type privKey struct {
diff --git a/ssh/agent/server.go b/ssh/agent/server.go
index 9a769de03d13c9..59467a5528de45 100644
--- a/ssh/agent/server.go
+++ b/ssh/agent/server.go
@@ -16,8 +16,8 @@ import (
 	"log"
 	"math/big"
 
-	"golang.org/x/crypto/ed25519"
-	"golang.org/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ed25519"
+	"github.com/dagood/x/crypto/ssh"
 )
 
 // server wraps an Agent and uses it to implement the agent side of
diff --git a/ssh/agent/server_test.go b/ssh/agent/server_test.go
index 0af85457e4da9d..25428b3d439e6a 100644
--- a/ssh/agent/server_test.go
+++ b/ssh/agent/server_test.go
@@ -13,7 +13,7 @@ import (
 	"strings"
 	"testing"
 
-	"golang.org/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ssh"
 )
 
 func TestServer(t *testing.T) {
diff --git a/ssh/agent/testdata_test.go b/ssh/agent/testdata_test.go
index cc42a87cb967ea..62272c23fe221e 100644
--- a/ssh/agent/testdata_test.go
+++ b/ssh/agent/testdata_test.go
@@ -12,8 +12,8 @@ import (
 	"crypto/rand"
 	"fmt"
 
-	"golang.org/x/crypto/ssh"
-	"golang.org/x/crypto/ssh/testdata"
+	"github.com/dagood/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ssh/testdata"
 )
 
 var (
diff --git a/ssh/cipher.go b/ssh/cipher.go
index 741e984f33cb75..d0004ad0bb2ba3 100644
--- a/ssh/cipher.go
+++ b/ssh/cipher.go
@@ -16,8 +16,8 @@ import (
 	"hash"
 	"io"
 
-	"golang.org/x/crypto/chacha20"
-	"golang.org/x/crypto/internal/poly1305"
+	"github.com/dagood/x/crypto/chacha20"
+	"github.com/dagood/x/crypto/internal/poly1305"
 )
 
 const (
diff --git a/ssh/cipher_test.go b/ssh/cipher_test.go
index f1be0d6db446df..7bd84e30cca749 100644
--- a/ssh/cipher_test.go
+++ b/ssh/cipher_test.go
@@ -12,8 +12,8 @@ import (
 	"io"
 	"testing"
 
-	"golang.org/x/crypto/chacha20"
-	"golang.org/x/crypto/internal/poly1305"
+	"github.com/dagood/x/crypto/chacha20"
+	"github.com/dagood/x/crypto/internal/poly1305"
 )
 
 func TestDefaultCiphersExist(t *testing.T) {
diff --git a/ssh/doc.go b/ssh/doc.go
index f6bff60dc741ac..c250180bc33891 100644
--- a/ssh/doc.go
+++ b/ssh/doc.go
@@ -19,4 +19,4 @@ References:
 This package does not fall under the stability promise of the Go language itself,
 so its API may be changed when pressing needs arise.
 */
-package ssh // import "golang.org/x/crypto/ssh"
+package ssh // import "github.com/dagood/x/crypto/ssh"
diff --git a/ssh/example_test.go b/ssh/example_test.go
index bee679603b57a4..921abb814ecc57 100644
--- a/ssh/example_test.go
+++ b/ssh/example_test.go
@@ -15,8 +15,8 @@ import (
 	"path/filepath"
 	"strings"
 
-	"golang.org/x/crypto/ssh"
-	"golang.org/x/crypto/ssh/terminal"
+	"github.com/dagood/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ssh/terminal"
 )
 
 func ExampleNewServerConn() {
diff --git a/ssh/internal/bcrypt_pbkdf/bcrypt_pbkdf.go b/ssh/internal/bcrypt_pbkdf/bcrypt_pbkdf.go
index af81d266546eaa..a8fe1af171e0cf 100644
--- a/ssh/internal/bcrypt_pbkdf/bcrypt_pbkdf.go
+++ b/ssh/internal/bcrypt_pbkdf/bcrypt_pbkdf.go
@@ -11,7 +11,8 @@ package bcrypt_pbkdf
 import (
 	"crypto/sha512"
 	"errors"
-	"golang.org/x/crypto/blowfish"
+
+	"github.com/dagood/x/crypto/blowfish"
 )
 
 const blockSize = 32
diff --git a/ssh/kex.go b/ssh/kex.go
index 8a05f79902c095..4d39bd2b0e314e 100644
--- a/ssh/kex.go
+++ b/ssh/kex.go
@@ -16,7 +16,7 @@ import (
 	"io"
 	"math/big"
 
-	"golang.org/x/crypto/curve25519"
+	"github.com/dagood/x/crypto/curve25519"
 )
 
 const (
diff --git a/ssh/keys.go b/ssh/keys.go
index dac8ee72447668..3b0313e1017c42 100644
--- a/ssh/keys.go
+++ b/ssh/keys.go
@@ -26,8 +26,8 @@ import (
 	"math/big"
 	"strings"
 
-	"golang.org/x/crypto/ed25519"
-	"golang.org/x/crypto/ssh/internal/bcrypt_pbkdf"
+	"github.com/dagood/x/crypto/ed25519"
+	"github.com/dagood/x/crypto/ssh/internal/bcrypt_pbkdf"
 )
 
 // Public key algorithms names. These values can appear in PublicKey.Type,
diff --git a/ssh/keys_test.go b/ssh/keys_test.go
index 334ef7453266db..5d7637c0135acc 100644
--- a/ssh/keys_test.go
+++ b/ssh/keys_test.go
@@ -21,8 +21,8 @@ import (
 	"strings"
 	"testing"
 
-	"golang.org/x/crypto/ed25519"
-	"golang.org/x/crypto/ssh/testdata"
+	"github.com/dagood/x/crypto/ed25519"
+	"github.com/dagood/x/crypto/ssh/testdata"
 )
 
 func rawKey(pub PublicKey) interface{} {
diff --git a/ssh/knownhosts/knownhosts.go b/ssh/knownhosts/knownhosts.go
index 7376a8dff23f61..cb3cf1a257fb73 100644
--- a/ssh/knownhosts/knownhosts.go
+++ b/ssh/knownhosts/knownhosts.go
@@ -21,7 +21,7 @@ import (
 	"os"
 	"strings"
 
-	"golang.org/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ssh"
 )
 
 // See the sshd manpage
diff --git a/ssh/knownhosts/knownhosts_test.go b/ssh/knownhosts/knownhosts_test.go
index 464dd592493ab3..413573c4e83e34 100644
--- a/ssh/knownhosts/knownhosts_test.go
+++ b/ssh/knownhosts/knownhosts_test.go
@@ -11,7 +11,7 @@ import (
 	"reflect"
 	"testing"
 
-	"golang.org/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ssh"
 )
 
 const edKeyStr = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGBAarftlLeoyf+v+nVchEZII/vna2PCV8FaX4vsF5BX"
diff --git a/ssh/session_test.go b/ssh/session_test.go
index 521677f9b106bc..53772934de83d2 100644
--- a/ssh/session_test.go
+++ b/ssh/session_test.go
@@ -15,7 +15,7 @@ import (
 	"net"
 	"testing"
 
-	"golang.org/x/crypto/ssh/terminal"
+	"github.com/dagood/x/crypto/ssh/terminal"
 )
 
 type serverType func(Channel, <-chan *Request, *testing.T)
diff --git a/ssh/test/agent_unix_test.go b/ssh/test/agent_unix_test.go
index 43fbdb22eb4e74..dcede6c5034df7 100644
--- a/ssh/test/agent_unix_test.go
+++ b/ssh/test/agent_unix_test.go
@@ -11,8 +11,8 @@ import (
 	"bytes"
 	"testing"
 
-	"golang.org/x/crypto/ssh"
-	"golang.org/x/crypto/ssh/agent"
+	"github.com/dagood/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ssh/agent"
 )
 
 func TestAgentForward(t *testing.T) {
diff --git a/ssh/test/cert_test.go b/ssh/test/cert_test.go
index 83dd534c5ca5db..cb62da0f716061 100644
--- a/ssh/test/cert_test.go
+++ b/ssh/test/cert_test.go
@@ -12,7 +12,7 @@ import (
 	"crypto/rand"
 	"testing"
 
-	"golang.org/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ssh"
 )
 
 // Test both logging in with a cert, and also that the certificate presented by an OpenSSH host can be validated correctly
diff --git a/ssh/test/doc.go b/ssh/test/doc.go
index 198f0ca1e20570..072c515cbd9938 100644
--- a/ssh/test/doc.go
+++ b/ssh/test/doc.go
@@ -3,5 +3,5 @@
 // license that can be found in the LICENSE file.
 
 // Package test contains integration tests for the
-// golang.org/x/crypto/ssh package.
-package test // import "golang.org/x/crypto/ssh/test"
+// github.com/dagood/x/crypto/ssh package.
+package test // import "github.com/dagood/x/crypto/ssh/test"
diff --git a/ssh/test/multi_auth_test.go b/ssh/test/multi_auth_test.go
index 403d7363ab0206..794ce698c12751 100644
--- a/ssh/test/multi_auth_test.go
+++ b/ssh/test/multi_auth_test.go
@@ -24,7 +24,7 @@ import (
 	"strings"
 	"testing"
 
-	"golang.org/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ssh"
 )
 
 // test cases
diff --git a/ssh/test/session_test.go b/ssh/test/session_test.go
index 4745ed9dbb1a92..8f48edb70b4c74 100644
--- a/ssh/test/session_test.go
+++ b/ssh/test/session_test.go
@@ -20,7 +20,7 @@ import (
 	"strings"
 	"testing"
 
-	"golang.org/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ssh"
 )
 
 func TestRunCommandSuccess(t *testing.T) {
diff --git a/ssh/test/test_unix_test.go b/ssh/test/test_unix_test.go
index f3f55db1288e45..8a9cf075ca32c0 100644
--- a/ssh/test/test_unix_test.go
+++ b/ssh/test/test_unix_test.go
@@ -23,9 +23,9 @@ import (
 	"testing"
 	"text/template"
 
-	"golang.org/x/crypto/internal/testenv"
-	"golang.org/x/crypto/ssh"
-	"golang.org/x/crypto/ssh/testdata"
+	"github.com/dagood/x/crypto/internal/testenv"
+	"github.com/dagood/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ssh/testdata"
 )
 
 const (
diff --git a/ssh/test/testdata_test.go b/ssh/test/testdata_test.go
index a053f67eabed4c..95e822cf4a4c13 100644
--- a/ssh/test/testdata_test.go
+++ b/ssh/test/testdata_test.go
@@ -12,8 +12,8 @@ import (
 	"crypto/rand"
 	"fmt"
 
-	"golang.org/x/crypto/ssh"
-	"golang.org/x/crypto/ssh/testdata"
+	"github.com/dagood/x/crypto/ssh"
+	"github.com/dagood/x/crypto/ssh/testdata"
 )
 
 var (
diff --git a/ssh/testdata/doc.go b/ssh/testdata/doc.go
index fcae47ca6878b4..7c52777c9087e4 100644
--- a/ssh/testdata/doc.go
+++ b/ssh/testdata/doc.go
@@ -3,6 +3,6 @@
 // license that can be found in the LICENSE file.
 
 // This package contains test data shared between the various subpackages of
-// the golang.org/x/crypto/ssh package. Under no circumstance should
+// the github.com/dagood/x/crypto/ssh package. Under no circumstance should
 // this data be used for production code.
-package testdata // import "golang.org/x/crypto/ssh/testdata"
+package testdata // import "github.com/dagood/x/crypto/ssh/testdata"
diff --git a/ssh/testdata_test.go b/ssh/testdata_test.go
index 2da8c79dc64a43..2e0581e6a724f9 100644
--- a/ssh/testdata_test.go
+++ b/ssh/testdata_test.go
@@ -12,7 +12,7 @@ import (
 	"crypto/rand"
 	"fmt"
 
-	"golang.org/x/crypto/ssh/testdata"
+	"github.com/dagood/x/crypto/ssh/testdata"
 )
 
 var (
diff --git a/tea/cipher.go b/tea/cipher.go
index c1ff90e048d005..6c1de3f233b422 100644
--- a/tea/cipher.go
+++ b/tea/cipher.go
@@ -12,7 +12,7 @@
 //
 // Deprecated: any new system should use AES (from crypto/aes, if necessary in
 // an AEAD mode like crypto/cipher.NewGCM) or XChaCha20-Poly1305 (from
-// golang.org/x/crypto/chacha20poly1305).
+// github.com/dagood/x/crypto/chacha20poly1305).
 package tea
 
 import (
diff --git a/twofish/twofish.go b/twofish/twofish.go
index e4eeae17f4040f..9ee5e0ff922719 100644
--- a/twofish/twofish.go
+++ b/twofish/twofish.go
@@ -8,8 +8,8 @@
 // applications. Also, this package does not and will not provide an optimized
 // implementation. Instead, use AES (from crypto/aes, if necessary in an AEAD
 // mode like crypto/cipher.NewGCM) or XChaCha20-Poly1305 (from
-// golang.org/x/crypto/chacha20poly1305).
-package twofish // import "golang.org/x/crypto/twofish"
+// github.com/dagood/x/crypto/chacha20poly1305).
+package twofish // import "github.com/dagood/x/crypto/twofish"
 
 // Twofish is defined in https://www.schneier.com/paper-twofish-paper.pdf [TWOFISH]
 
diff --git a/x509roots/fallback/fallback.go b/x509roots/fallback/fallback.go
index 31413595fa8826..db9828bd6a2045 100644
--- a/x509roots/fallback/fallback.go
+++ b/x509roots/fallback/fallback.go
@@ -11,7 +11,7 @@
 //
 // To use it, import the package like
 //
-//	import _ "golang.org/x/crypto/x509roots/fallback"
+//	import _ "github.com/dagood/x/crypto/x509roots/fallback"
 //
 // It's recommended that only binaries, and not libraries, import this package.
 //
diff --git a/x509roots/fallback/go.mod b/x509roots/fallback/go.mod
index d8974bf9fe0a79..71c5a86249b96b 100644
--- a/x509roots/fallback/go.mod
+++ b/x509roots/fallback/go.mod
@@ -1,3 +1,3 @@
-module golang.org/x/crypto/x509roots/fallback
+module github.com/dagood/x/crypto/x509roots/fallback
 
 go 1.20
diff --git a/x509roots/gen_fallback_bundle.go b/x509roots/gen_fallback_bundle.go
index c22d1b0c381b64..f79a1805d4d121 100644
--- a/x509roots/gen_fallback_bundle.go
+++ b/x509roots/gen_fallback_bundle.go
@@ -22,7 +22,7 @@ import (
 	"os"
 	"sort"
 
-	"golang.org/x/crypto/x509roots/nss"
+	"github.com/dagood/x/crypto/x509roots/nss"
 )
 
 const tmpl = `// Code generated by gen_fallback_bundle.go; DO NOT EDIT.
diff --git a/x509roots/nss/parser.go b/x509roots/nss/parser.go
index 1af3e0ae46fe1c..a803ccec35a0dd 100644
--- a/x509roots/nss/parser.go
+++ b/x509roots/nss/parser.go
@@ -5,7 +5,7 @@
 // Package nss provides functionality for parsing NSS certdata.txt
 // formatted certificate lists and extracting serverAuth roots. Most
 // users should not use this package themselves, and should instead
-// rely on the golang.org/x/crypto/x509roots/fallback package which
+// rely on the github.com/dagood/x/crypto/x509roots/fallback package which
 // calls x509.SetFallbackRoots on a pre-parsed set of roots.
 package nss
 
diff --git a/xtea/cipher.go b/xtea/cipher.go
index a4c2fd02b32003..f952f41a07e6dd 100644
--- a/xtea/cipher.go
+++ b/xtea/cipher.go
@@ -11,8 +11,8 @@
 //
 // Deprecated: any new system should use AES (from crypto/aes, if necessary in
 // an AEAD mode like crypto/cipher.NewGCM) or XChaCha20-Poly1305 (from
-// golang.org/x/crypto/chacha20poly1305).
-package xtea // import "golang.org/x/crypto/xtea"
+// github.com/dagood/x/crypto/chacha20poly1305).
+package xtea // import "github.com/dagood/x/crypto/xtea"
 
 // For details, see http://www.cix.co.uk/~klockstone/xtea.pdf
 
diff --git a/xts/xts.go b/xts/xts.go
index 8c16a8301460eb..1a9d82c25d3693 100644
--- a/xts/xts.go
+++ b/xts/xts.go
@@ -21,7 +21,7 @@
 //
 // Note that XTS is usually not appropriate for any use besides disk encryption.
 // Most users should use an AEAD mode like GCM (from crypto/cipher.NewGCM) instead.
-package xts // import "golang.org/x/crypto/xts"
+package xts // import "github.com/dagood/x/crypto/xts"
 
 import (
 	"crypto/cipher"
@@ -29,7 +29,7 @@ import (
 	"errors"
 	"sync"
 
-	"golang.org/x/crypto/internal/alias"
+	"github.com/dagood/x/crypto/internal/alias"
 )
 
 // Cipher contains an expanded key structure. It is safe for concurrent use if
